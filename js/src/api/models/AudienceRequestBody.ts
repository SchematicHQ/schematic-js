/* tslint:disable */
/* eslint-disable */
/**
 * Schematic API
 * Schematic API
 *
 * The version of the OpenAPI document: 0.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from "../runtime";
import type { CreateOrUpdateConditionRequestBody } from "./CreateOrUpdateConditionRequestBody";
import {
  CreateOrUpdateConditionRequestBodyFromJSON,
  CreateOrUpdateConditionRequestBodyFromJSONTyped,
  CreateOrUpdateConditionRequestBodyToJSON,
  CreateOrUpdateConditionRequestBodyToJSONTyped,
} from "./CreateOrUpdateConditionRequestBody";
import type { CreateOrUpdateConditionGroupRequestBody } from "./CreateOrUpdateConditionGroupRequestBody";
import {
  CreateOrUpdateConditionGroupRequestBodyFromJSON,
  CreateOrUpdateConditionGroupRequestBodyFromJSONTyped,
  CreateOrUpdateConditionGroupRequestBodyToJSON,
  CreateOrUpdateConditionGroupRequestBodyToJSONTyped,
} from "./CreateOrUpdateConditionGroupRequestBody";

/**
 *
 * @export
 * @interface AudienceRequestBody
 */
export interface AudienceRequestBody {
  /**
   *
   * @type {Array<CreateOrUpdateConditionGroupRequestBody>}
   * @memberof AudienceRequestBody
   */
  conditionGroups: Array<CreateOrUpdateConditionGroupRequestBody>;
  /**
   *
   * @type {Array<CreateOrUpdateConditionRequestBody>}
   * @memberof AudienceRequestBody
   */
  conditions: Array<CreateOrUpdateConditionRequestBody>;
  /**
   * Page limit (default 100)
   * @type {number}
   * @memberof AudienceRequestBody
   */
  limit?: number | null;
  /**
   * Page offset (default 0)
   * @type {number}
   * @memberof AudienceRequestBody
   */
  offset?: number | null;
  /**
   *
   * @type {string}
   * @memberof AudienceRequestBody
   */
  q?: string | null;
}

/**
 * Check if a given object implements the AudienceRequestBody interface.
 */
export function instanceOfAudienceRequestBody(
  value: object,
): value is AudienceRequestBody {
  if (!("conditionGroups" in value) || value["conditionGroups"] === undefined)
    return false;
  if (!("conditions" in value) || value["conditions"] === undefined)
    return false;
  return true;
}

export function AudienceRequestBodyFromJSON(json: any): AudienceRequestBody {
  return AudienceRequestBodyFromJSONTyped(json, false);
}

export function AudienceRequestBodyFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean,
): AudienceRequestBody {
  if (json == null) {
    return json;
  }
  return {
    conditionGroups: (json["condition_groups"] as Array<any>).map(
      CreateOrUpdateConditionGroupRequestBodyFromJSON,
    ),
    conditions: (json["conditions"] as Array<any>).map(
      CreateOrUpdateConditionRequestBodyFromJSON,
    ),
    limit: json["limit"] == null ? undefined : json["limit"],
    offset: json["offset"] == null ? undefined : json["offset"],
    q: json["q"] == null ? undefined : json["q"],
  };
}

export function AudienceRequestBodyToJSON(json: any): AudienceRequestBody {
  return AudienceRequestBodyToJSONTyped(json, false);
}

export function AudienceRequestBodyToJSONTyped(
  value?: AudienceRequestBody | null,
  ignoreDiscriminator: boolean = false,
): any {
  if (value == null) {
    return value;
  }

  return {
    condition_groups: (value["conditionGroups"] as Array<any>).map(
      CreateOrUpdateConditionGroupRequestBodyToJSON,
    ),
    conditions: (value["conditions"] as Array<any>).map(
      CreateOrUpdateConditionRequestBodyToJSON,
    ),
    limit: value["limit"],
    offset: value["offset"],
    q: value["q"],
  };
}
