/* tslint:disable */
/* eslint-disable */
/**
 * Schematic API
 * Schematic API
 *
 * The version of the OpenAPI document: 0.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from "../runtime";
/**
 * Input parameters
 * @export
 * @interface ListPlanEntitlementsParams
 */
export interface ListPlanEntitlementsParams {
  /**
   * Filter plan entitlements by a single feature ID (starting with feat_)
   * @type {string}
   * @memberof ListPlanEntitlementsParams
   */
  featureId?: string;
  /**
   * Filter plan entitlements by multiple feature IDs (starting with feat_)
   * @type {Array<string>}
   * @memberof ListPlanEntitlementsParams
   */
  featureIds?: Array<string>;
  /**
   * Filter plan entitlements by multiple plan entitlement IDs (starting with pltl_)
   * @type {Array<string>}
   * @memberof ListPlanEntitlementsParams
   */
  ids?: Array<string>;
  /**
   * Page limit (default 100)
   * @type {number}
   * @memberof ListPlanEntitlementsParams
   */
  limit?: number;
  /**
   * Page offset (default 0)
   * @type {number}
   * @memberof ListPlanEntitlementsParams
   */
  offset?: number;
  /**
   * Filter plan entitlements by a single plan ID (starting with plan_)
   * @type {string}
   * @memberof ListPlanEntitlementsParams
   */
  planId?: string;
  /**
   * Filter plan entitlements by multiple plan IDs (starting with plan_)
   * @type {Array<string>}
   * @memberof ListPlanEntitlementsParams
   */
  planIds?: Array<string>;
  /**
   * Search for plan entitlements by feature or company name
   * @type {string}
   * @memberof ListPlanEntitlementsParams
   */
  q?: string;
  /**
   * Filter plan entitlements only with metered products
   * @type {boolean}
   * @memberof ListPlanEntitlementsParams
   */
  withMeteredProducts?: boolean;
}

/**
 * Check if a given object implements the ListPlanEntitlementsParams interface.
 */
export function instanceOfListPlanEntitlementsParams(
  value: object,
): value is ListPlanEntitlementsParams {
  return true;
}

export function ListPlanEntitlementsParamsFromJSON(
  json: any,
): ListPlanEntitlementsParams {
  return ListPlanEntitlementsParamsFromJSONTyped(json, false);
}

export function ListPlanEntitlementsParamsFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean,
): ListPlanEntitlementsParams {
  if (json == null) {
    return json;
  }
  return {
    featureId: json["feature_id"] == null ? undefined : json["feature_id"],
    featureIds: json["feature_ids"] == null ? undefined : json["feature_ids"],
    ids: json["ids"] == null ? undefined : json["ids"],
    limit: json["limit"] == null ? undefined : json["limit"],
    offset: json["offset"] == null ? undefined : json["offset"],
    planId: json["plan_id"] == null ? undefined : json["plan_id"],
    planIds: json["plan_ids"] == null ? undefined : json["plan_ids"],
    q: json["q"] == null ? undefined : json["q"],
    withMeteredProducts:
      json["with_metered_products"] == null
        ? undefined
        : json["with_metered_products"],
  };
}

export function ListPlanEntitlementsParamsToJSON(
  json: any,
): ListPlanEntitlementsParams {
  return ListPlanEntitlementsParamsToJSONTyped(json, false);
}

export function ListPlanEntitlementsParamsToJSONTyped(
  value?: ListPlanEntitlementsParams | null,
  ignoreDiscriminator: boolean = false,
): any {
  if (value == null) {
    return value;
  }

  return {
    feature_id: value["featureId"],
    feature_ids: value["featureIds"],
    ids: value["ids"],
    limit: value["limit"],
    offset: value["offset"],
    plan_id: value["planId"],
    plan_ids: value["planIds"],
    q: value["q"],
    with_metered_products: value["withMeteredProducts"],
  };
}
