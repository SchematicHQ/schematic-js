/* tslint:disable */
/* eslint-disable */
/**
 * Schematic API
 * Schematic API
 *
 * The version of the OpenAPI document: 0.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from "../runtime";
import type { CompanyPlanDetailResponseData } from "./CompanyPlanDetailResponseData";
import {
  CompanyPlanDetailResponseDataFromJSON,
  CompanyPlanDetailResponseDataFromJSONTyped,
  CompanyPlanDetailResponseDataToJSON,
  CompanyPlanDetailResponseDataToJSONTyped,
} from "./CompanyPlanDetailResponseData";
import type { UsageBasedEntitlementResponseData } from "./UsageBasedEntitlementResponseData";
import {
  UsageBasedEntitlementResponseDataFromJSON,
  UsageBasedEntitlementResponseDataFromJSONTyped,
  UsageBasedEntitlementResponseDataToJSON,
  UsageBasedEntitlementResponseDataToJSONTyped,
} from "./UsageBasedEntitlementResponseData";
import type { ComponentCapabilities } from "./ComponentCapabilities";
import {
  ComponentCapabilitiesFromJSON,
  ComponentCapabilitiesFromJSONTyped,
  ComponentCapabilitiesToJSON,
  ComponentCapabilitiesToJSONTyped,
} from "./ComponentCapabilities";
import type { ComponentResponseData } from "./ComponentResponseData";
import {
  ComponentResponseDataFromJSON,
  ComponentResponseDataFromJSONTyped,
  ComponentResponseDataToJSON,
  ComponentResponseDataToJSONTyped,
} from "./ComponentResponseData";
import type { FeatureUsageDetailResponseData } from "./FeatureUsageDetailResponseData";
import {
  FeatureUsageDetailResponseDataFromJSON,
  FeatureUsageDetailResponseDataFromJSONTyped,
  FeatureUsageDetailResponseDataToJSON,
  FeatureUsageDetailResponseDataToJSONTyped,
} from "./FeatureUsageDetailResponseData";
import type { StripeEmbedInfo } from "./StripeEmbedInfo";
import {
  StripeEmbedInfoFromJSON,
  StripeEmbedInfoFromJSONTyped,
  StripeEmbedInfoToJSON,
  StripeEmbedInfoToJSONTyped,
} from "./StripeEmbedInfo";
import type { CompanyDetailResponseData } from "./CompanyDetailResponseData";
import {
  CompanyDetailResponseDataFromJSON,
  CompanyDetailResponseDataFromJSONTyped,
  CompanyDetailResponseDataToJSON,
  CompanyDetailResponseDataToJSONTyped,
} from "./CompanyDetailResponseData";
import type { InvoiceResponseData } from "./InvoiceResponseData";
import {
  InvoiceResponseDataFromJSON,
  InvoiceResponseDataFromJSONTyped,
  InvoiceResponseDataToJSON,
  InvoiceResponseDataToJSONTyped,
} from "./InvoiceResponseData";
import type { CompanySubscriptionResponseData } from "./CompanySubscriptionResponseData";
import {
  CompanySubscriptionResponseDataFromJSON,
  CompanySubscriptionResponseDataFromJSONTyped,
  CompanySubscriptionResponseDataToJSON,
  CompanySubscriptionResponseDataToJSONTyped,
} from "./CompanySubscriptionResponseData";

/**
 * The returned resource
 * @export
 * @interface ComponentPreviewResponseData
 */
export interface ComponentPreviewResponseData {
  /**
   *
   * @type {Array<CompanyPlanDetailResponseData>}
   * @memberof ComponentPreviewResponseData
   */
  activeAddOns: Array<CompanyPlanDetailResponseData>;
  /**
   *
   * @type {Array<CompanyPlanDetailResponseData>}
   * @memberof ComponentPreviewResponseData
   */
  activePlans: Array<CompanyPlanDetailResponseData>;
  /**
   *
   * @type {Array<UsageBasedEntitlementResponseData>}
   * @memberof ComponentPreviewResponseData
   */
  activeUsageBasedEntitlements: Array<UsageBasedEntitlementResponseData>;
  /**
   *
   * @type {ComponentCapabilities}
   * @memberof ComponentPreviewResponseData
   */
  capabilities?: ComponentCapabilities;
  /**
   *
   * @type {CompanyDetailResponseData}
   * @memberof ComponentPreviewResponseData
   */
  company?: CompanyDetailResponseData;
  /**
   *
   * @type {ComponentResponseData}
   * @memberof ComponentPreviewResponseData
   */
  component?: ComponentResponseData;
  /**
   *
   * @type {FeatureUsageDetailResponseData}
   * @memberof ComponentPreviewResponseData
   */
  featureUsage?: FeatureUsageDetailResponseData;
  /**
   *
   * @type {Array<InvoiceResponseData>}
   * @memberof ComponentPreviewResponseData
   */
  invoices: Array<InvoiceResponseData>;
  /**
   *
   * @type {StripeEmbedInfo}
   * @memberof ComponentPreviewResponseData
   */
  stripeEmbed?: StripeEmbedInfo;
  /**
   *
   * @type {CompanySubscriptionResponseData}
   * @memberof ComponentPreviewResponseData
   */
  subscription?: CompanySubscriptionResponseData;
  /**
   *
   * @type {InvoiceResponseData}
   * @memberof ComponentPreviewResponseData
   */
  upcomingInvoice?: InvoiceResponseData;
}

/**
 * Check if a given object implements the ComponentPreviewResponseData interface.
 */
export function instanceOfComponentPreviewResponseData(
  value: object,
): value is ComponentPreviewResponseData {
  if (!("activeAddOns" in value) || value["activeAddOns"] === undefined)
    return false;
  if (!("activePlans" in value) || value["activePlans"] === undefined)
    return false;
  if (
    !("activeUsageBasedEntitlements" in value) ||
    value["activeUsageBasedEntitlements"] === undefined
  )
    return false;
  if (!("invoices" in value) || value["invoices"] === undefined) return false;
  return true;
}

export function ComponentPreviewResponseDataFromJSON(
  json: any,
): ComponentPreviewResponseData {
  return ComponentPreviewResponseDataFromJSONTyped(json, false);
}

export function ComponentPreviewResponseDataFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean,
): ComponentPreviewResponseData {
  if (json == null) {
    return json;
  }
  return {
    activeAddOns: (json["active_add_ons"] as Array<any>).map(
      CompanyPlanDetailResponseDataFromJSON,
    ),
    activePlans: (json["active_plans"] as Array<any>).map(
      CompanyPlanDetailResponseDataFromJSON,
    ),
    activeUsageBasedEntitlements: (
      json["active_usage_based_entitlements"] as Array<any>
    ).map(UsageBasedEntitlementResponseDataFromJSON),
    capabilities:
      json["capabilities"] == null
        ? undefined
        : ComponentCapabilitiesFromJSON(json["capabilities"]),
    company:
      json["company"] == null
        ? undefined
        : CompanyDetailResponseDataFromJSON(json["company"]),
    component:
      json["component"] == null
        ? undefined
        : ComponentResponseDataFromJSON(json["component"]),
    featureUsage:
      json["feature_usage"] == null
        ? undefined
        : FeatureUsageDetailResponseDataFromJSON(json["feature_usage"]),
    invoices: (json["invoices"] as Array<any>).map(InvoiceResponseDataFromJSON),
    stripeEmbed:
      json["stripe_embed"] == null
        ? undefined
        : StripeEmbedInfoFromJSON(json["stripe_embed"]),
    subscription:
      json["subscription"] == null
        ? undefined
        : CompanySubscriptionResponseDataFromJSON(json["subscription"]),
    upcomingInvoice:
      json["upcoming_invoice"] == null
        ? undefined
        : InvoiceResponseDataFromJSON(json["upcoming_invoice"]),
  };
}

export function ComponentPreviewResponseDataToJSON(
  json: any,
): ComponentPreviewResponseData {
  return ComponentPreviewResponseDataToJSONTyped(json, false);
}

export function ComponentPreviewResponseDataToJSONTyped(
  value?: ComponentPreviewResponseData | null,
  ignoreDiscriminator: boolean = false,
): any {
  if (value == null) {
    return value;
  }

  return {
    active_add_ons: (value["activeAddOns"] as Array<any>).map(
      CompanyPlanDetailResponseDataToJSON,
    ),
    active_plans: (value["activePlans"] as Array<any>).map(
      CompanyPlanDetailResponseDataToJSON,
    ),
    active_usage_based_entitlements: (
      value["activeUsageBasedEntitlements"] as Array<any>
    ).map(UsageBasedEntitlementResponseDataToJSON),
    capabilities: ComponentCapabilitiesToJSON(value["capabilities"]),
    company: CompanyDetailResponseDataToJSON(value["company"]),
    component: ComponentResponseDataToJSON(value["component"]),
    feature_usage: FeatureUsageDetailResponseDataToJSON(value["featureUsage"]),
    invoices: (value["invoices"] as Array<any>).map(InvoiceResponseDataToJSON),
    stripe_embed: StripeEmbedInfoToJSON(value["stripeEmbed"]),
    subscription: CompanySubscriptionResponseDataToJSON(value["subscription"]),
    upcoming_invoice: InvoiceResponseDataToJSON(value["upcomingInvoice"]),
  };
}
