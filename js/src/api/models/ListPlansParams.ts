/* tslint:disable */
/* eslint-disable */
/**
 * Schematic API
 * Schematic API
 *
 * The version of the OpenAPI document: 0.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from "../runtime";
/**
 * Input parameters
 * @export
 * @interface ListPlansParams
 */
export interface ListPlansParams {
  /**
   *
   * @type {string}
   * @memberof ListPlansParams
   */
  companyId?: string;
  /**
   * Filter out plans that do not have a billing product ID
   * @type {boolean}
   * @memberof ListPlansParams
   */
  hasProductId?: boolean;
  /**
   *
   * @type {Array<string>}
   * @memberof ListPlansParams
   */
  ids?: Array<string>;
  /**
   * Page limit (default 100)
   * @type {number}
   * @memberof ListPlansParams
   */
  limit?: number;
  /**
   * Page offset (default 0)
   * @type {number}
   * @memberof ListPlansParams
   */
  offset?: number;
  /**
   * Filter by plan type
   * @type {string}
   * @memberof ListPlansParams
   */
  planType?: ListPlansParamsPlanTypeEnum;
  /**
   *
   * @type {string}
   * @memberof ListPlansParams
   */
  q?: string;
  /**
   * Filter out plans that already have a plan entitlement for the specified feature ID
   * @type {string}
   * @memberof ListPlansParams
   */
  withoutEntitlementFor?: string;
  /**
   * Filter out plans that have a billing product ID
   * @type {boolean}
   * @memberof ListPlansParams
   */
  withoutProductId?: boolean;
}

/**
 * @export
 */
export const ListPlansParamsPlanTypeEnum = {
  Plan: "plan",
  AddOn: "add_on",
} as const;
export type ListPlansParamsPlanTypeEnum =
  (typeof ListPlansParamsPlanTypeEnum)[keyof typeof ListPlansParamsPlanTypeEnum];

/**
 * Check if a given object implements the ListPlansParams interface.
 */
export function instanceOfListPlansParams(
  value: object,
): value is ListPlansParams {
  return true;
}

export function ListPlansParamsFromJSON(json: any): ListPlansParams {
  return ListPlansParamsFromJSONTyped(json, false);
}

export function ListPlansParamsFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean,
): ListPlansParams {
  if (json == null) {
    return json;
  }
  return {
    companyId: json["company_id"] == null ? undefined : json["company_id"],
    hasProductId:
      json["has_product_id"] == null ? undefined : json["has_product_id"],
    ids: json["ids"] == null ? undefined : json["ids"],
    limit: json["limit"] == null ? undefined : json["limit"],
    offset: json["offset"] == null ? undefined : json["offset"],
    planType: json["plan_type"] == null ? undefined : json["plan_type"],
    q: json["q"] == null ? undefined : json["q"],
    withoutEntitlementFor:
      json["without_entitlement_for"] == null
        ? undefined
        : json["without_entitlement_for"],
    withoutProductId:
      json["without_product_id"] == null
        ? undefined
        : json["without_product_id"],
  };
}

export function ListPlansParamsToJSON(json: any): ListPlansParams {
  return ListPlansParamsToJSONTyped(json, false);
}

export function ListPlansParamsToJSONTyped(
  value?: ListPlansParams | null,
  ignoreDiscriminator: boolean = false,
): any {
  if (value == null) {
    return value;
  }

  return {
    company_id: value["companyId"],
    has_product_id: value["hasProductId"],
    ids: value["ids"],
    limit: value["limit"],
    offset: value["offset"],
    plan_type: value["planType"],
    q: value["q"],
    without_entitlement_for: value["withoutEntitlementFor"],
    without_product_id: value["withoutProductId"],
  };
}
