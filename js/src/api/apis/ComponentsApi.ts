/* tslint:disable */
/* eslint-disable */
/**
 * Schematic API
 * Schematic API
 *
 * The version of the OpenAPI document: 0.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from "../runtime";
import type {
  ApiError,
  CountComponentsResponse,
  CreateComponentRequestBody,
  CreateComponentResponse,
  DeleteComponentResponse,
  GetComponentResponse,
  ListComponentsResponse,
  PreviewComponentDataResponse,
  UpdateComponentRequestBody,
  UpdateComponentResponse,
} from "../models/index";
import {
  ApiErrorFromJSON,
  ApiErrorToJSON,
  CountComponentsResponseFromJSON,
  CountComponentsResponseToJSON,
  CreateComponentRequestBodyFromJSON,
  CreateComponentRequestBodyToJSON,
  CreateComponentResponseFromJSON,
  CreateComponentResponseToJSON,
  DeleteComponentResponseFromJSON,
  DeleteComponentResponseToJSON,
  GetComponentResponseFromJSON,
  GetComponentResponseToJSON,
  ListComponentsResponseFromJSON,
  ListComponentsResponseToJSON,
  PreviewComponentDataResponseFromJSON,
  PreviewComponentDataResponseToJSON,
  UpdateComponentRequestBodyFromJSON,
  UpdateComponentRequestBodyToJSON,
  UpdateComponentResponseFromJSON,
  UpdateComponentResponseToJSON,
} from "../models/index";

export interface CountComponentsRequest {
  q?: string;
  limit?: number;
  offset?: number;
}

export interface CreateComponentRequest {
  createComponentRequestBody: CreateComponentRequestBody;
}

export interface DeleteComponentRequest {
  componentId: string;
}

export interface GetComponentRequest {
  componentId: string;
}

export interface ListComponentsRequest {
  q?: string;
  limit?: number;
  offset?: number;
}

export interface PreviewComponentDataRequest {
  companyId?: string;
  componentId?: string;
}

export interface UpdateComponentRequest {
  componentId: string;
  updateComponentRequestBody: UpdateComponentRequestBody;
}

/**
 *
 */
export class ComponentsApi extends runtime.BaseAPI {
  /**
   * Count components
   */
  async countComponentsRaw(
    requestParameters: CountComponentsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<CountComponentsResponse>> {
    const queryParameters: any = {};

    if (requestParameters["q"] != null) {
      queryParameters["q"] = requestParameters["q"];
    }

    if (requestParameters["limit"] != null) {
      queryParameters["limit"] = requestParameters["limit"];
    }

    if (requestParameters["offset"] != null) {
      queryParameters["offset"] = requestParameters["offset"];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["X-Schematic-Api-Key"] = await this.configuration.apiKey(
        "X-Schematic-Api-Key",
      ); // ApiKeyAuth authentication
    }

    const response = await this.request(
      {
        path: `/components/count`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      CountComponentsResponseFromJSON(jsonValue),
    );
  }

  /**
   * Count components
   */
  async countComponents(
    requestParameters: CountComponentsRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<CountComponentsResponse> {
    const response = await this.countComponentsRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Create component
   */
  async createComponentRaw(
    requestParameters: CreateComponentRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<CreateComponentResponse>> {
    if (requestParameters["createComponentRequestBody"] == null) {
      throw new runtime.RequiredError(
        "createComponentRequestBody",
        'Required parameter "createComponentRequestBody" was null or undefined when calling createComponent().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["X-Schematic-Api-Key"] = await this.configuration.apiKey(
        "X-Schematic-Api-Key",
      ); // ApiKeyAuth authentication
    }

    const response = await this.request(
      {
        path: `/components`,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: CreateComponentRequestBodyToJSON(
          requestParameters["createComponentRequestBody"],
        ),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      CreateComponentResponseFromJSON(jsonValue),
    );
  }

  /**
   * Create component
   */
  async createComponent(
    requestParameters: CreateComponentRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<CreateComponentResponse> {
    const response = await this.createComponentRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Delete component
   */
  async deleteComponentRaw(
    requestParameters: DeleteComponentRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<DeleteComponentResponse>> {
    if (requestParameters["componentId"] == null) {
      throw new runtime.RequiredError(
        "componentId",
        'Required parameter "componentId" was null or undefined when calling deleteComponent().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["X-Schematic-Api-Key"] = await this.configuration.apiKey(
        "X-Schematic-Api-Key",
      ); // ApiKeyAuth authentication
    }

    const response = await this.request(
      {
        path: `/components/{component_id}`.replace(
          `{${"component_id"}}`,
          encodeURIComponent(String(requestParameters["componentId"])),
        ),
        method: "DELETE",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      DeleteComponentResponseFromJSON(jsonValue),
    );
  }

  /**
   * Delete component
   */
  async deleteComponent(
    requestParameters: DeleteComponentRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<DeleteComponentResponse> {
    const response = await this.deleteComponentRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Get component
   */
  async getComponentRaw(
    requestParameters: GetComponentRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<GetComponentResponse>> {
    if (requestParameters["componentId"] == null) {
      throw new runtime.RequiredError(
        "componentId",
        'Required parameter "componentId" was null or undefined when calling getComponent().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["X-Schematic-Api-Key"] = await this.configuration.apiKey(
        "X-Schematic-Api-Key",
      ); // ApiKeyAuth authentication
    }

    const response = await this.request(
      {
        path: `/components/{component_id}`.replace(
          `{${"component_id"}}`,
          encodeURIComponent(String(requestParameters["componentId"])),
        ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      GetComponentResponseFromJSON(jsonValue),
    );
  }

  /**
   * Get component
   */
  async getComponent(
    requestParameters: GetComponentRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<GetComponentResponse> {
    const response = await this.getComponentRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * List components
   */
  async listComponentsRaw(
    requestParameters: ListComponentsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<ListComponentsResponse>> {
    const queryParameters: any = {};

    if (requestParameters["q"] != null) {
      queryParameters["q"] = requestParameters["q"];
    }

    if (requestParameters["limit"] != null) {
      queryParameters["limit"] = requestParameters["limit"];
    }

    if (requestParameters["offset"] != null) {
      queryParameters["offset"] = requestParameters["offset"];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["X-Schematic-Api-Key"] = await this.configuration.apiKey(
        "X-Schematic-Api-Key",
      ); // ApiKeyAuth authentication
    }

    const response = await this.request(
      {
        path: `/components`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      ListComponentsResponseFromJSON(jsonValue),
    );
  }

  /**
   * List components
   */
  async listComponents(
    requestParameters: ListComponentsRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<ListComponentsResponse> {
    const response = await this.listComponentsRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Preview component data
   */
  async previewComponentDataRaw(
    requestParameters: PreviewComponentDataRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<PreviewComponentDataResponse>> {
    const queryParameters: any = {};

    if (requestParameters["companyId"] != null) {
      queryParameters["company_id"] = requestParameters["companyId"];
    }

    if (requestParameters["componentId"] != null) {
      queryParameters["component_id"] = requestParameters["componentId"];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["X-Schematic-Api-Key"] = await this.configuration.apiKey(
        "X-Schematic-Api-Key",
      ); // ApiKeyAuth authentication
    }

    const response = await this.request(
      {
        path: `/components/preview-data`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      PreviewComponentDataResponseFromJSON(jsonValue),
    );
  }

  /**
   * Preview component data
   */
  async previewComponentData(
    requestParameters: PreviewComponentDataRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<PreviewComponentDataResponse> {
    const response = await this.previewComponentDataRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Update component
   */
  async updateComponentRaw(
    requestParameters: UpdateComponentRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<UpdateComponentResponse>> {
    if (requestParameters["componentId"] == null) {
      throw new runtime.RequiredError(
        "componentId",
        'Required parameter "componentId" was null or undefined when calling updateComponent().',
      );
    }

    if (requestParameters["updateComponentRequestBody"] == null) {
      throw new runtime.RequiredError(
        "updateComponentRequestBody",
        'Required parameter "updateComponentRequestBody" was null or undefined when calling updateComponent().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["X-Schematic-Api-Key"] = await this.configuration.apiKey(
        "X-Schematic-Api-Key",
      ); // ApiKeyAuth authentication
    }

    const response = await this.request(
      {
        path: `/components/{component_id}`.replace(
          `{${"component_id"}}`,
          encodeURIComponent(String(requestParameters["componentId"])),
        ),
        method: "PUT",
        headers: headerParameters,
        query: queryParameters,
        body: UpdateComponentRequestBodyToJSON(
          requestParameters["updateComponentRequestBody"],
        ),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      UpdateComponentResponseFromJSON(jsonValue),
    );
  }

  /**
   * Update component
   */
  async updateComponent(
    requestParameters: UpdateComponentRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<UpdateComponentResponse> {
    const response = await this.updateComponentRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }
}
