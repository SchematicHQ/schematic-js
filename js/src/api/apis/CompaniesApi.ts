/* tslint:disable */
/* eslint-disable */
/**
 * Schematic API
 * Schematic API
 *
 * The version of the OpenAPI document: 0.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from "../runtime";
import type {
  ApiError,
  CountCompaniesResponse,
  CountEntityKeyDefinitionsResponse,
  CountEntityTraitDefinitionsResponse,
  CountUsersResponse,
  CreateCompanyResponse,
  CreateEntityTraitDefinitionRequestBody,
  CreateUserResponse,
  DeleteCompanyByKeysResponse,
  DeleteCompanyMembershipResponse,
  DeleteCompanyResponse,
  DeleteUserByKeysResponse,
  DeleteUserResponse,
  GetActiveCompanySubscriptionResponse,
  GetActiveDealsResponse,
  GetCompanyResponse,
  GetEntityTraitDefinitionResponse,
  GetEntityTraitValuesResponse,
  GetOrCreateCompanyMembershipRequestBody,
  GetOrCreateCompanyMembershipResponse,
  GetOrCreateEntityTraitDefinitionResponse,
  GetUserResponse,
  KeysRequestBody,
  ListCompaniesResponse,
  ListCompanyMembershipsResponse,
  ListEntityKeyDefinitionsResponse,
  ListEntityTraitDefinitionsResponse,
  ListUsersResponse,
  LookupCompanyResponse,
  LookupUserResponse,
  UpdateEntityTraitDefinitionRequestBody,
  UpdateEntityTraitDefinitionResponse,
  UpsertCompanyRequestBody,
  UpsertCompanyResponse,
  UpsertCompanyTraitResponse,
  UpsertTraitRequestBody,
  UpsertUserRequestBody,
  UpsertUserResponse,
  UpsertUserTraitResponse,
} from "../models/index";
import {
  ApiErrorFromJSON,
  ApiErrorToJSON,
  CountCompaniesResponseFromJSON,
  CountCompaniesResponseToJSON,
  CountEntityKeyDefinitionsResponseFromJSON,
  CountEntityKeyDefinitionsResponseToJSON,
  CountEntityTraitDefinitionsResponseFromJSON,
  CountEntityTraitDefinitionsResponseToJSON,
  CountUsersResponseFromJSON,
  CountUsersResponseToJSON,
  CreateCompanyResponseFromJSON,
  CreateCompanyResponseToJSON,
  CreateEntityTraitDefinitionRequestBodyFromJSON,
  CreateEntityTraitDefinitionRequestBodyToJSON,
  CreateUserResponseFromJSON,
  CreateUserResponseToJSON,
  DeleteCompanyByKeysResponseFromJSON,
  DeleteCompanyByKeysResponseToJSON,
  DeleteCompanyMembershipResponseFromJSON,
  DeleteCompanyMembershipResponseToJSON,
  DeleteCompanyResponseFromJSON,
  DeleteCompanyResponseToJSON,
  DeleteUserByKeysResponseFromJSON,
  DeleteUserByKeysResponseToJSON,
  DeleteUserResponseFromJSON,
  DeleteUserResponseToJSON,
  GetActiveCompanySubscriptionResponseFromJSON,
  GetActiveCompanySubscriptionResponseToJSON,
  GetActiveDealsResponseFromJSON,
  GetActiveDealsResponseToJSON,
  GetCompanyResponseFromJSON,
  GetCompanyResponseToJSON,
  GetEntityTraitDefinitionResponseFromJSON,
  GetEntityTraitDefinitionResponseToJSON,
  GetEntityTraitValuesResponseFromJSON,
  GetEntityTraitValuesResponseToJSON,
  GetOrCreateCompanyMembershipRequestBodyFromJSON,
  GetOrCreateCompanyMembershipRequestBodyToJSON,
  GetOrCreateCompanyMembershipResponseFromJSON,
  GetOrCreateCompanyMembershipResponseToJSON,
  GetOrCreateEntityTraitDefinitionResponseFromJSON,
  GetOrCreateEntityTraitDefinitionResponseToJSON,
  GetUserResponseFromJSON,
  GetUserResponseToJSON,
  KeysRequestBodyFromJSON,
  KeysRequestBodyToJSON,
  ListCompaniesResponseFromJSON,
  ListCompaniesResponseToJSON,
  ListCompanyMembershipsResponseFromJSON,
  ListCompanyMembershipsResponseToJSON,
  ListEntityKeyDefinitionsResponseFromJSON,
  ListEntityKeyDefinitionsResponseToJSON,
  ListEntityTraitDefinitionsResponseFromJSON,
  ListEntityTraitDefinitionsResponseToJSON,
  ListUsersResponseFromJSON,
  ListUsersResponseToJSON,
  LookupCompanyResponseFromJSON,
  LookupCompanyResponseToJSON,
  LookupUserResponseFromJSON,
  LookupUserResponseToJSON,
  UpdateEntityTraitDefinitionRequestBodyFromJSON,
  UpdateEntityTraitDefinitionRequestBodyToJSON,
  UpdateEntityTraitDefinitionResponseFromJSON,
  UpdateEntityTraitDefinitionResponseToJSON,
  UpsertCompanyRequestBodyFromJSON,
  UpsertCompanyRequestBodyToJSON,
  UpsertCompanyResponseFromJSON,
  UpsertCompanyResponseToJSON,
  UpsertCompanyTraitResponseFromJSON,
  UpsertCompanyTraitResponseToJSON,
  UpsertTraitRequestBodyFromJSON,
  UpsertTraitRequestBodyToJSON,
  UpsertUserRequestBodyFromJSON,
  UpsertUserRequestBodyToJSON,
  UpsertUserResponseFromJSON,
  UpsertUserResponseToJSON,
  UpsertUserTraitResponseFromJSON,
  UpsertUserTraitResponseToJSON,
} from "../models/index";

export interface CountCompaniesRequest {
  ids?: Array<string>;
  planId?: string;
  q?: string;
  withoutFeatureOverrideFor?: string;
  withoutPlan?: boolean;
  limit?: number;
  offset?: number;
}

export interface CountEntityKeyDefinitionsRequest {
  entityType?: CountEntityKeyDefinitionsEntityTypeEnum;
  ids?: Array<string>;
  q?: string;
  limit?: number;
  offset?: number;
}

export interface CountEntityTraitDefinitionsRequest {
  entityType?: CountEntityTraitDefinitionsEntityTypeEnum;
  ids?: Array<string>;
  q?: string;
  traitType?: CountEntityTraitDefinitionsTraitTypeEnum;
  limit?: number;
  offset?: number;
}

export interface CountUsersRequest {
  companyId?: string;
  ids?: Array<string>;
  planId?: string;
  q?: string;
  limit?: number;
  offset?: number;
}

export interface CreateCompanyRequest {
  upsertCompanyRequestBody: UpsertCompanyRequestBody;
}

export interface CreateUserRequest {
  upsertUserRequestBody: UpsertUserRequestBody;
}

export interface DeleteCompanyRequest {
  companyId: string;
}

export interface DeleteCompanyByKeysRequest {
  keysRequestBody: KeysRequestBody;
}

export interface DeleteCompanyMembershipRequest {
  companyMembershipId: string;
}

export interface DeleteUserRequest {
  userId: string;
}

export interface DeleteUserByKeysRequest {
  keysRequestBody: KeysRequestBody;
}

export interface GetActiveCompanySubscriptionRequest {
  companyId?: string;
  companyIds?: Array<string>;
  limit?: number;
  offset?: number;
}

export interface GetActiveDealsRequest {
  companyId: string;
  dealStage: string;
  limit?: number;
  offset?: number;
}

export interface GetCompanyRequest {
  companyId: string;
}

export interface GetEntityTraitDefinitionRequest {
  entityTraitDefinitionId: string;
}

export interface GetEntityTraitValuesRequest {
  definitionId: string;
  q?: string;
  limit?: number;
  offset?: number;
}

export interface GetOrCreateCompanyMembershipRequest {
  getOrCreateCompanyMembershipRequestBody: GetOrCreateCompanyMembershipRequestBody;
}

export interface GetOrCreateEntityTraitDefinitionRequest {
  createEntityTraitDefinitionRequestBody: CreateEntityTraitDefinitionRequestBody;
}

export interface GetUserRequest {
  userId: string;
}

export interface ListCompaniesRequest {
  ids?: Array<string>;
  planId?: string;
  q?: string;
  withoutFeatureOverrideFor?: string;
  withoutPlan?: boolean;
  limit?: number;
  offset?: number;
}

export interface ListCompanyMembershipsRequest {
  companyId?: string;
  userId?: string;
  limit?: number;
  offset?: number;
}

export interface ListEntityKeyDefinitionsRequest {
  entityType?: ListEntityKeyDefinitionsEntityTypeEnum;
  ids?: Array<string>;
  q?: string;
  limit?: number;
  offset?: number;
}

export interface ListEntityTraitDefinitionsRequest {
  entityType?: ListEntityTraitDefinitionsEntityTypeEnum;
  ids?: Array<string>;
  q?: string;
  traitType?: ListEntityTraitDefinitionsTraitTypeEnum;
  limit?: number;
  offset?: number;
}

export interface ListUsersRequest {
  companyId?: string;
  ids?: Array<string>;
  planId?: string;
  q?: string;
  limit?: number;
  offset?: number;
}

export interface LookupCompanyRequest {
  keys: object;
}

export interface LookupUserRequest {
  keys: object;
}

export interface UpdateEntityTraitDefinitionRequest {
  entityTraitDefinitionId: string;
  updateEntityTraitDefinitionRequestBody: UpdateEntityTraitDefinitionRequestBody;
}

export interface UpsertCompanyRequest {
  upsertCompanyRequestBody: UpsertCompanyRequestBody;
}

export interface UpsertCompanyTraitRequest {
  upsertTraitRequestBody: UpsertTraitRequestBody;
}

export interface UpsertUserRequest {
  upsertUserRequestBody: UpsertUserRequestBody;
}

export interface UpsertUserTraitRequest {
  upsertTraitRequestBody: UpsertTraitRequestBody;
}

/**
 *
 */
export class CompaniesApi extends runtime.BaseAPI {
  /**
   * Count companies
   */
  async countCompaniesRaw(
    requestParameters: CountCompaniesRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<CountCompaniesResponse>> {
    const queryParameters: any = {};

    if (requestParameters["ids"] != null) {
      queryParameters["ids"] = requestParameters["ids"];
    }

    if (requestParameters["planId"] != null) {
      queryParameters["plan_id"] = requestParameters["planId"];
    }

    if (requestParameters["q"] != null) {
      queryParameters["q"] = requestParameters["q"];
    }

    if (requestParameters["withoutFeatureOverrideFor"] != null) {
      queryParameters["without_feature_override_for"] =
        requestParameters["withoutFeatureOverrideFor"];
    }

    if (requestParameters["withoutPlan"] != null) {
      queryParameters["without_plan"] = requestParameters["withoutPlan"];
    }

    if (requestParameters["limit"] != null) {
      queryParameters["limit"] = requestParameters["limit"];
    }

    if (requestParameters["offset"] != null) {
      queryParameters["offset"] = requestParameters["offset"];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["X-Schematic-Api-Key"] = await this.configuration.apiKey(
        "X-Schematic-Api-Key",
      ); // ApiKeyAuth authentication
    }

    const response = await this.request(
      {
        path: `/companies/count`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      CountCompaniesResponseFromJSON(jsonValue),
    );
  }

  /**
   * Count companies
   */
  async countCompanies(
    requestParameters: CountCompaniesRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<CountCompaniesResponse> {
    const response = await this.countCompaniesRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Count entity key definitions
   */
  async countEntityKeyDefinitionsRaw(
    requestParameters: CountEntityKeyDefinitionsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<CountEntityKeyDefinitionsResponse>> {
    const queryParameters: any = {};

    if (requestParameters["entityType"] != null) {
      queryParameters["entity_type"] = requestParameters["entityType"];
    }

    if (requestParameters["ids"] != null) {
      queryParameters["ids"] = requestParameters["ids"];
    }

    if (requestParameters["q"] != null) {
      queryParameters["q"] = requestParameters["q"];
    }

    if (requestParameters["limit"] != null) {
      queryParameters["limit"] = requestParameters["limit"];
    }

    if (requestParameters["offset"] != null) {
      queryParameters["offset"] = requestParameters["offset"];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["X-Schematic-Api-Key"] = await this.configuration.apiKey(
        "X-Schematic-Api-Key",
      ); // ApiKeyAuth authentication
    }

    const response = await this.request(
      {
        path: `/entity-key-definitions/count`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      CountEntityKeyDefinitionsResponseFromJSON(jsonValue),
    );
  }

  /**
   * Count entity key definitions
   */
  async countEntityKeyDefinitions(
    requestParameters: CountEntityKeyDefinitionsRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<CountEntityKeyDefinitionsResponse> {
    const response = await this.countEntityKeyDefinitionsRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Count entity trait definitions
   */
  async countEntityTraitDefinitionsRaw(
    requestParameters: CountEntityTraitDefinitionsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<CountEntityTraitDefinitionsResponse>> {
    const queryParameters: any = {};

    if (requestParameters["entityType"] != null) {
      queryParameters["entity_type"] = requestParameters["entityType"];
    }

    if (requestParameters["ids"] != null) {
      queryParameters["ids"] = requestParameters["ids"];
    }

    if (requestParameters["q"] != null) {
      queryParameters["q"] = requestParameters["q"];
    }

    if (requestParameters["traitType"] != null) {
      queryParameters["trait_type"] = requestParameters["traitType"];
    }

    if (requestParameters["limit"] != null) {
      queryParameters["limit"] = requestParameters["limit"];
    }

    if (requestParameters["offset"] != null) {
      queryParameters["offset"] = requestParameters["offset"];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["X-Schematic-Api-Key"] = await this.configuration.apiKey(
        "X-Schematic-Api-Key",
      ); // ApiKeyAuth authentication
    }

    const response = await this.request(
      {
        path: `/entity-trait-definitions/count`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      CountEntityTraitDefinitionsResponseFromJSON(jsonValue),
    );
  }

  /**
   * Count entity trait definitions
   */
  async countEntityTraitDefinitions(
    requestParameters: CountEntityTraitDefinitionsRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<CountEntityTraitDefinitionsResponse> {
    const response = await this.countEntityTraitDefinitionsRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Count users
   */
  async countUsersRaw(
    requestParameters: CountUsersRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<CountUsersResponse>> {
    const queryParameters: any = {};

    if (requestParameters["companyId"] != null) {
      queryParameters["company_id"] = requestParameters["companyId"];
    }

    if (requestParameters["ids"] != null) {
      queryParameters["ids"] = requestParameters["ids"];
    }

    if (requestParameters["planId"] != null) {
      queryParameters["plan_id"] = requestParameters["planId"];
    }

    if (requestParameters["q"] != null) {
      queryParameters["q"] = requestParameters["q"];
    }

    if (requestParameters["limit"] != null) {
      queryParameters["limit"] = requestParameters["limit"];
    }

    if (requestParameters["offset"] != null) {
      queryParameters["offset"] = requestParameters["offset"];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["X-Schematic-Api-Key"] = await this.configuration.apiKey(
        "X-Schematic-Api-Key",
      ); // ApiKeyAuth authentication
    }

    const response = await this.request(
      {
        path: `/users/count`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      CountUsersResponseFromJSON(jsonValue),
    );
  }

  /**
   * Count users
   */
  async countUsers(
    requestParameters: CountUsersRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<CountUsersResponse> {
    const response = await this.countUsersRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * Create company
   */
  async createCompanyRaw(
    requestParameters: CreateCompanyRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<CreateCompanyResponse>> {
    if (requestParameters["upsertCompanyRequestBody"] == null) {
      throw new runtime.RequiredError(
        "upsertCompanyRequestBody",
        'Required parameter "upsertCompanyRequestBody" was null or undefined when calling createCompany().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["X-Schematic-Api-Key"] = await this.configuration.apiKey(
        "X-Schematic-Api-Key",
      ); // ApiKeyAuth authentication
    }

    const response = await this.request(
      {
        path: `/companies/create`,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: UpsertCompanyRequestBodyToJSON(
          requestParameters["upsertCompanyRequestBody"],
        ),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      CreateCompanyResponseFromJSON(jsonValue),
    );
  }

  /**
   * Create company
   */
  async createCompany(
    requestParameters: CreateCompanyRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<CreateCompanyResponse> {
    const response = await this.createCompanyRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Create user
   */
  async createUserRaw(
    requestParameters: CreateUserRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<CreateUserResponse>> {
    if (requestParameters["upsertUserRequestBody"] == null) {
      throw new runtime.RequiredError(
        "upsertUserRequestBody",
        'Required parameter "upsertUserRequestBody" was null or undefined when calling createUser().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["X-Schematic-Api-Key"] = await this.configuration.apiKey(
        "X-Schematic-Api-Key",
      ); // ApiKeyAuth authentication
    }

    const response = await this.request(
      {
        path: `/users/create`,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: UpsertUserRequestBodyToJSON(
          requestParameters["upsertUserRequestBody"],
        ),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      CreateUserResponseFromJSON(jsonValue),
    );
  }

  /**
   * Create user
   */
  async createUser(
    requestParameters: CreateUserRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<CreateUserResponse> {
    const response = await this.createUserRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * Delete company
   */
  async deleteCompanyRaw(
    requestParameters: DeleteCompanyRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<DeleteCompanyResponse>> {
    if (requestParameters["companyId"] == null) {
      throw new runtime.RequiredError(
        "companyId",
        'Required parameter "companyId" was null or undefined when calling deleteCompany().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["X-Schematic-Api-Key"] = await this.configuration.apiKey(
        "X-Schematic-Api-Key",
      ); // ApiKeyAuth authentication
    }

    const response = await this.request(
      {
        path: `/companies/{company_id}`.replace(
          `{${"company_id"}}`,
          encodeURIComponent(String(requestParameters["companyId"])),
        ),
        method: "DELETE",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      DeleteCompanyResponseFromJSON(jsonValue),
    );
  }

  /**
   * Delete company
   */
  async deleteCompany(
    requestParameters: DeleteCompanyRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<DeleteCompanyResponse> {
    const response = await this.deleteCompanyRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Delete company by keys
   */
  async deleteCompanyByKeysRaw(
    requestParameters: DeleteCompanyByKeysRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<DeleteCompanyByKeysResponse>> {
    if (requestParameters["keysRequestBody"] == null) {
      throw new runtime.RequiredError(
        "keysRequestBody",
        'Required parameter "keysRequestBody" was null or undefined when calling deleteCompanyByKeys().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["X-Schematic-Api-Key"] = await this.configuration.apiKey(
        "X-Schematic-Api-Key",
      ); // ApiKeyAuth authentication
    }

    const response = await this.request(
      {
        path: `/companies/delete`,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: KeysRequestBodyToJSON(requestParameters["keysRequestBody"]),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      DeleteCompanyByKeysResponseFromJSON(jsonValue),
    );
  }

  /**
   * Delete company by keys
   */
  async deleteCompanyByKeys(
    requestParameters: DeleteCompanyByKeysRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<DeleteCompanyByKeysResponse> {
    const response = await this.deleteCompanyByKeysRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Delete company membership
   */
  async deleteCompanyMembershipRaw(
    requestParameters: DeleteCompanyMembershipRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<DeleteCompanyMembershipResponse>> {
    if (requestParameters["companyMembershipId"] == null) {
      throw new runtime.RequiredError(
        "companyMembershipId",
        'Required parameter "companyMembershipId" was null or undefined when calling deleteCompanyMembership().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["X-Schematic-Api-Key"] = await this.configuration.apiKey(
        "X-Schematic-Api-Key",
      ); // ApiKeyAuth authentication
    }

    const response = await this.request(
      {
        path: `/company-memberships/{company_membership_id}`.replace(
          `{${"company_membership_id"}}`,
          encodeURIComponent(String(requestParameters["companyMembershipId"])),
        ),
        method: "DELETE",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      DeleteCompanyMembershipResponseFromJSON(jsonValue),
    );
  }

  /**
   * Delete company membership
   */
  async deleteCompanyMembership(
    requestParameters: DeleteCompanyMembershipRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<DeleteCompanyMembershipResponse> {
    const response = await this.deleteCompanyMembershipRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Delete user
   */
  async deleteUserRaw(
    requestParameters: DeleteUserRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<DeleteUserResponse>> {
    if (requestParameters["userId"] == null) {
      throw new runtime.RequiredError(
        "userId",
        'Required parameter "userId" was null or undefined when calling deleteUser().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["X-Schematic-Api-Key"] = await this.configuration.apiKey(
        "X-Schematic-Api-Key",
      ); // ApiKeyAuth authentication
    }

    const response = await this.request(
      {
        path: `/users/{user_id}`.replace(
          `{${"user_id"}}`,
          encodeURIComponent(String(requestParameters["userId"])),
        ),
        method: "DELETE",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      DeleteUserResponseFromJSON(jsonValue),
    );
  }

  /**
   * Delete user
   */
  async deleteUser(
    requestParameters: DeleteUserRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<DeleteUserResponse> {
    const response = await this.deleteUserRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * Delete user by keys
   */
  async deleteUserByKeysRaw(
    requestParameters: DeleteUserByKeysRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<DeleteUserByKeysResponse>> {
    if (requestParameters["keysRequestBody"] == null) {
      throw new runtime.RequiredError(
        "keysRequestBody",
        'Required parameter "keysRequestBody" was null or undefined when calling deleteUserByKeys().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["X-Schematic-Api-Key"] = await this.configuration.apiKey(
        "X-Schematic-Api-Key",
      ); // ApiKeyAuth authentication
    }

    const response = await this.request(
      {
        path: `/users/delete`,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: KeysRequestBodyToJSON(requestParameters["keysRequestBody"]),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      DeleteUserByKeysResponseFromJSON(jsonValue),
    );
  }

  /**
   * Delete user by keys
   */
  async deleteUserByKeys(
    requestParameters: DeleteUserByKeysRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<DeleteUserByKeysResponse> {
    const response = await this.deleteUserByKeysRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Get active company subscription
   */
  async getActiveCompanySubscriptionRaw(
    requestParameters: GetActiveCompanySubscriptionRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<GetActiveCompanySubscriptionResponse>> {
    const queryParameters: any = {};

    if (requestParameters["companyId"] != null) {
      queryParameters["company_id"] = requestParameters["companyId"];
    }

    if (requestParameters["companyIds"] != null) {
      queryParameters["company_ids"] = requestParameters["companyIds"];
    }

    if (requestParameters["limit"] != null) {
      queryParameters["limit"] = requestParameters["limit"];
    }

    if (requestParameters["offset"] != null) {
      queryParameters["offset"] = requestParameters["offset"];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["X-Schematic-Api-Key"] = await this.configuration.apiKey(
        "X-Schematic-Api-Key",
      ); // ApiKeyAuth authentication
    }

    const response = await this.request(
      {
        path: `/company-subscriptions`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      GetActiveCompanySubscriptionResponseFromJSON(jsonValue),
    );
  }

  /**
   * Get active company subscription
   */
  async getActiveCompanySubscription(
    requestParameters: GetActiveCompanySubscriptionRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<GetActiveCompanySubscriptionResponse> {
    const response = await this.getActiveCompanySubscriptionRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Get active deals
   */
  async getActiveDealsRaw(
    requestParameters: GetActiveDealsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<GetActiveDealsResponse>> {
    if (requestParameters["companyId"] == null) {
      throw new runtime.RequiredError(
        "companyId",
        'Required parameter "companyId" was null or undefined when calling getActiveDeals().',
      );
    }

    if (requestParameters["dealStage"] == null) {
      throw new runtime.RequiredError(
        "dealStage",
        'Required parameter "dealStage" was null or undefined when calling getActiveDeals().',
      );
    }

    const queryParameters: any = {};

    if (requestParameters["companyId"] != null) {
      queryParameters["company_id"] = requestParameters["companyId"];
    }

    if (requestParameters["dealStage"] != null) {
      queryParameters["deal_stage"] = requestParameters["dealStage"];
    }

    if (requestParameters["limit"] != null) {
      queryParameters["limit"] = requestParameters["limit"];
    }

    if (requestParameters["offset"] != null) {
      queryParameters["offset"] = requestParameters["offset"];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["X-Schematic-Api-Key"] = await this.configuration.apiKey(
        "X-Schematic-Api-Key",
      ); // ApiKeyAuth authentication
    }

    const response = await this.request(
      {
        path: `/company-crm-deals`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      GetActiveDealsResponseFromJSON(jsonValue),
    );
  }

  /**
   * Get active deals
   */
  async getActiveDeals(
    requestParameters: GetActiveDealsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<GetActiveDealsResponse> {
    const response = await this.getActiveDealsRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Get company
   */
  async getCompanyRaw(
    requestParameters: GetCompanyRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<GetCompanyResponse>> {
    if (requestParameters["companyId"] == null) {
      throw new runtime.RequiredError(
        "companyId",
        'Required parameter "companyId" was null or undefined when calling getCompany().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["X-Schematic-Api-Key"] = await this.configuration.apiKey(
        "X-Schematic-Api-Key",
      ); // ApiKeyAuth authentication
    }

    const response = await this.request(
      {
        path: `/companies/{company_id}`.replace(
          `{${"company_id"}}`,
          encodeURIComponent(String(requestParameters["companyId"])),
        ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      GetCompanyResponseFromJSON(jsonValue),
    );
  }

  /**
   * Get company
   */
  async getCompany(
    requestParameters: GetCompanyRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<GetCompanyResponse> {
    const response = await this.getCompanyRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * Get entity trait definition
   */
  async getEntityTraitDefinitionRaw(
    requestParameters: GetEntityTraitDefinitionRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<GetEntityTraitDefinitionResponse>> {
    if (requestParameters["entityTraitDefinitionId"] == null) {
      throw new runtime.RequiredError(
        "entityTraitDefinitionId",
        'Required parameter "entityTraitDefinitionId" was null or undefined when calling getEntityTraitDefinition().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["X-Schematic-Api-Key"] = await this.configuration.apiKey(
        "X-Schematic-Api-Key",
      ); // ApiKeyAuth authentication
    }

    const response = await this.request(
      {
        path: `/entity-trait-definitions/{entity_trait_definition_id}`.replace(
          `{${"entity_trait_definition_id"}}`,
          encodeURIComponent(
            String(requestParameters["entityTraitDefinitionId"]),
          ),
        ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      GetEntityTraitDefinitionResponseFromJSON(jsonValue),
    );
  }

  /**
   * Get entity trait definition
   */
  async getEntityTraitDefinition(
    requestParameters: GetEntityTraitDefinitionRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<GetEntityTraitDefinitionResponse> {
    const response = await this.getEntityTraitDefinitionRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Get entity trait values
   */
  async getEntityTraitValuesRaw(
    requestParameters: GetEntityTraitValuesRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<GetEntityTraitValuesResponse>> {
    if (requestParameters["definitionId"] == null) {
      throw new runtime.RequiredError(
        "definitionId",
        'Required parameter "definitionId" was null or undefined when calling getEntityTraitValues().',
      );
    }

    const queryParameters: any = {};

    if (requestParameters["definitionId"] != null) {
      queryParameters["definition_id"] = requestParameters["definitionId"];
    }

    if (requestParameters["q"] != null) {
      queryParameters["q"] = requestParameters["q"];
    }

    if (requestParameters["limit"] != null) {
      queryParameters["limit"] = requestParameters["limit"];
    }

    if (requestParameters["offset"] != null) {
      queryParameters["offset"] = requestParameters["offset"];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["X-Schematic-Api-Key"] = await this.configuration.apiKey(
        "X-Schematic-Api-Key",
      ); // ApiKeyAuth authentication
    }

    const response = await this.request(
      {
        path: `/entity-trait-values`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      GetEntityTraitValuesResponseFromJSON(jsonValue),
    );
  }

  /**
   * Get entity trait values
   */
  async getEntityTraitValues(
    requestParameters: GetEntityTraitValuesRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<GetEntityTraitValuesResponse> {
    const response = await this.getEntityTraitValuesRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Get or create company membership
   */
  async getOrCreateCompanyMembershipRaw(
    requestParameters: GetOrCreateCompanyMembershipRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<GetOrCreateCompanyMembershipResponse>> {
    if (requestParameters["getOrCreateCompanyMembershipRequestBody"] == null) {
      throw new runtime.RequiredError(
        "getOrCreateCompanyMembershipRequestBody",
        'Required parameter "getOrCreateCompanyMembershipRequestBody" was null or undefined when calling getOrCreateCompanyMembership().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["X-Schematic-Api-Key"] = await this.configuration.apiKey(
        "X-Schematic-Api-Key",
      ); // ApiKeyAuth authentication
    }

    const response = await this.request(
      {
        path: `/company-memberships`,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: GetOrCreateCompanyMembershipRequestBodyToJSON(
          requestParameters["getOrCreateCompanyMembershipRequestBody"],
        ),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      GetOrCreateCompanyMembershipResponseFromJSON(jsonValue),
    );
  }

  /**
   * Get or create company membership
   */
  async getOrCreateCompanyMembership(
    requestParameters: GetOrCreateCompanyMembershipRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<GetOrCreateCompanyMembershipResponse> {
    const response = await this.getOrCreateCompanyMembershipRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Get or create entity trait definition
   */
  async getOrCreateEntityTraitDefinitionRaw(
    requestParameters: GetOrCreateEntityTraitDefinitionRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<GetOrCreateEntityTraitDefinitionResponse>> {
    if (requestParameters["createEntityTraitDefinitionRequestBody"] == null) {
      throw new runtime.RequiredError(
        "createEntityTraitDefinitionRequestBody",
        'Required parameter "createEntityTraitDefinitionRequestBody" was null or undefined when calling getOrCreateEntityTraitDefinition().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["X-Schematic-Api-Key"] = await this.configuration.apiKey(
        "X-Schematic-Api-Key",
      ); // ApiKeyAuth authentication
    }

    const response = await this.request(
      {
        path: `/entity-trait-definitions`,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: CreateEntityTraitDefinitionRequestBodyToJSON(
          requestParameters["createEntityTraitDefinitionRequestBody"],
        ),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      GetOrCreateEntityTraitDefinitionResponseFromJSON(jsonValue),
    );
  }

  /**
   * Get or create entity trait definition
   */
  async getOrCreateEntityTraitDefinition(
    requestParameters: GetOrCreateEntityTraitDefinitionRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<GetOrCreateEntityTraitDefinitionResponse> {
    const response = await this.getOrCreateEntityTraitDefinitionRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Get user
   */
  async getUserRaw(
    requestParameters: GetUserRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<GetUserResponse>> {
    if (requestParameters["userId"] == null) {
      throw new runtime.RequiredError(
        "userId",
        'Required parameter "userId" was null or undefined when calling getUser().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["X-Schematic-Api-Key"] = await this.configuration.apiKey(
        "X-Schematic-Api-Key",
      ); // ApiKeyAuth authentication
    }

    const response = await this.request(
      {
        path: `/users/{user_id}`.replace(
          `{${"user_id"}}`,
          encodeURIComponent(String(requestParameters["userId"])),
        ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      GetUserResponseFromJSON(jsonValue),
    );
  }

  /**
   * Get user
   */
  async getUser(
    requestParameters: GetUserRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<GetUserResponse> {
    const response = await this.getUserRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * List companies
   */
  async listCompaniesRaw(
    requestParameters: ListCompaniesRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<ListCompaniesResponse>> {
    const queryParameters: any = {};

    if (requestParameters["ids"] != null) {
      queryParameters["ids"] = requestParameters["ids"];
    }

    if (requestParameters["planId"] != null) {
      queryParameters["plan_id"] = requestParameters["planId"];
    }

    if (requestParameters["q"] != null) {
      queryParameters["q"] = requestParameters["q"];
    }

    if (requestParameters["withoutFeatureOverrideFor"] != null) {
      queryParameters["without_feature_override_for"] =
        requestParameters["withoutFeatureOverrideFor"];
    }

    if (requestParameters["withoutPlan"] != null) {
      queryParameters["without_plan"] = requestParameters["withoutPlan"];
    }

    if (requestParameters["limit"] != null) {
      queryParameters["limit"] = requestParameters["limit"];
    }

    if (requestParameters["offset"] != null) {
      queryParameters["offset"] = requestParameters["offset"];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["X-Schematic-Api-Key"] = await this.configuration.apiKey(
        "X-Schematic-Api-Key",
      ); // ApiKeyAuth authentication
    }

    const response = await this.request(
      {
        path: `/companies`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      ListCompaniesResponseFromJSON(jsonValue),
    );
  }

  /**
   * List companies
   */
  async listCompanies(
    requestParameters: ListCompaniesRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<ListCompaniesResponse> {
    const response = await this.listCompaniesRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * List company memberships
   */
  async listCompanyMembershipsRaw(
    requestParameters: ListCompanyMembershipsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<ListCompanyMembershipsResponse>> {
    const queryParameters: any = {};

    if (requestParameters["companyId"] != null) {
      queryParameters["company_id"] = requestParameters["companyId"];
    }

    if (requestParameters["userId"] != null) {
      queryParameters["user_id"] = requestParameters["userId"];
    }

    if (requestParameters["limit"] != null) {
      queryParameters["limit"] = requestParameters["limit"];
    }

    if (requestParameters["offset"] != null) {
      queryParameters["offset"] = requestParameters["offset"];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["X-Schematic-Api-Key"] = await this.configuration.apiKey(
        "X-Schematic-Api-Key",
      ); // ApiKeyAuth authentication
    }

    const response = await this.request(
      {
        path: `/company-memberships`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      ListCompanyMembershipsResponseFromJSON(jsonValue),
    );
  }

  /**
   * List company memberships
   */
  async listCompanyMemberships(
    requestParameters: ListCompanyMembershipsRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<ListCompanyMembershipsResponse> {
    const response = await this.listCompanyMembershipsRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * List entity key definitions
   */
  async listEntityKeyDefinitionsRaw(
    requestParameters: ListEntityKeyDefinitionsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<ListEntityKeyDefinitionsResponse>> {
    const queryParameters: any = {};

    if (requestParameters["entityType"] != null) {
      queryParameters["entity_type"] = requestParameters["entityType"];
    }

    if (requestParameters["ids"] != null) {
      queryParameters["ids"] = requestParameters["ids"];
    }

    if (requestParameters["q"] != null) {
      queryParameters["q"] = requestParameters["q"];
    }

    if (requestParameters["limit"] != null) {
      queryParameters["limit"] = requestParameters["limit"];
    }

    if (requestParameters["offset"] != null) {
      queryParameters["offset"] = requestParameters["offset"];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["X-Schematic-Api-Key"] = await this.configuration.apiKey(
        "X-Schematic-Api-Key",
      ); // ApiKeyAuth authentication
    }

    const response = await this.request(
      {
        path: `/entity-key-definitions`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      ListEntityKeyDefinitionsResponseFromJSON(jsonValue),
    );
  }

  /**
   * List entity key definitions
   */
  async listEntityKeyDefinitions(
    requestParameters: ListEntityKeyDefinitionsRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<ListEntityKeyDefinitionsResponse> {
    const response = await this.listEntityKeyDefinitionsRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * List entity trait definitions
   */
  async listEntityTraitDefinitionsRaw(
    requestParameters: ListEntityTraitDefinitionsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<ListEntityTraitDefinitionsResponse>> {
    const queryParameters: any = {};

    if (requestParameters["entityType"] != null) {
      queryParameters["entity_type"] = requestParameters["entityType"];
    }

    if (requestParameters["ids"] != null) {
      queryParameters["ids"] = requestParameters["ids"];
    }

    if (requestParameters["q"] != null) {
      queryParameters["q"] = requestParameters["q"];
    }

    if (requestParameters["traitType"] != null) {
      queryParameters["trait_type"] = requestParameters["traitType"];
    }

    if (requestParameters["limit"] != null) {
      queryParameters["limit"] = requestParameters["limit"];
    }

    if (requestParameters["offset"] != null) {
      queryParameters["offset"] = requestParameters["offset"];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["X-Schematic-Api-Key"] = await this.configuration.apiKey(
        "X-Schematic-Api-Key",
      ); // ApiKeyAuth authentication
    }

    const response = await this.request(
      {
        path: `/entity-trait-definitions`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      ListEntityTraitDefinitionsResponseFromJSON(jsonValue),
    );
  }

  /**
   * List entity trait definitions
   */
  async listEntityTraitDefinitions(
    requestParameters: ListEntityTraitDefinitionsRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<ListEntityTraitDefinitionsResponse> {
    const response = await this.listEntityTraitDefinitionsRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * List users
   */
  async listUsersRaw(
    requestParameters: ListUsersRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<ListUsersResponse>> {
    const queryParameters: any = {};

    if (requestParameters["companyId"] != null) {
      queryParameters["company_id"] = requestParameters["companyId"];
    }

    if (requestParameters["ids"] != null) {
      queryParameters["ids"] = requestParameters["ids"];
    }

    if (requestParameters["planId"] != null) {
      queryParameters["plan_id"] = requestParameters["planId"];
    }

    if (requestParameters["q"] != null) {
      queryParameters["q"] = requestParameters["q"];
    }

    if (requestParameters["limit"] != null) {
      queryParameters["limit"] = requestParameters["limit"];
    }

    if (requestParameters["offset"] != null) {
      queryParameters["offset"] = requestParameters["offset"];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["X-Schematic-Api-Key"] = await this.configuration.apiKey(
        "X-Schematic-Api-Key",
      ); // ApiKeyAuth authentication
    }

    const response = await this.request(
      {
        path: `/users`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      ListUsersResponseFromJSON(jsonValue),
    );
  }

  /**
   * List users
   */
  async listUsers(
    requestParameters: ListUsersRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<ListUsersResponse> {
    const response = await this.listUsersRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * Lookup company
   */
  async lookupCompanyRaw(
    requestParameters: LookupCompanyRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<LookupCompanyResponse>> {
    if (requestParameters["keys"] == null) {
      throw new runtime.RequiredError(
        "keys",
        'Required parameter "keys" was null or undefined when calling lookupCompany().',
      );
    }

    const queryParameters: any = {};

    if (requestParameters["keys"] != null) {
      queryParameters["keys"] = requestParameters["keys"];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["X-Schematic-Api-Key"] = await this.configuration.apiKey(
        "X-Schematic-Api-Key",
      ); // ApiKeyAuth authentication
    }

    const response = await this.request(
      {
        path: `/companies/lookup`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      LookupCompanyResponseFromJSON(jsonValue),
    );
  }

  /**
   * Lookup company
   */
  async lookupCompany(
    requestParameters: LookupCompanyRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<LookupCompanyResponse> {
    const response = await this.lookupCompanyRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Lookup user
   */
  async lookupUserRaw(
    requestParameters: LookupUserRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<LookupUserResponse>> {
    if (requestParameters["keys"] == null) {
      throw new runtime.RequiredError(
        "keys",
        'Required parameter "keys" was null or undefined when calling lookupUser().',
      );
    }

    const queryParameters: any = {};

    if (requestParameters["keys"] != null) {
      queryParameters["keys"] = requestParameters["keys"];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["X-Schematic-Api-Key"] = await this.configuration.apiKey(
        "X-Schematic-Api-Key",
      ); // ApiKeyAuth authentication
    }

    const response = await this.request(
      {
        path: `/users/lookup`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      LookupUserResponseFromJSON(jsonValue),
    );
  }

  /**
   * Lookup user
   */
  async lookupUser(
    requestParameters: LookupUserRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<LookupUserResponse> {
    const response = await this.lookupUserRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * Update entity trait definition
   */
  async updateEntityTraitDefinitionRaw(
    requestParameters: UpdateEntityTraitDefinitionRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<UpdateEntityTraitDefinitionResponse>> {
    if (requestParameters["entityTraitDefinitionId"] == null) {
      throw new runtime.RequiredError(
        "entityTraitDefinitionId",
        'Required parameter "entityTraitDefinitionId" was null or undefined when calling updateEntityTraitDefinition().',
      );
    }

    if (requestParameters["updateEntityTraitDefinitionRequestBody"] == null) {
      throw new runtime.RequiredError(
        "updateEntityTraitDefinitionRequestBody",
        'Required parameter "updateEntityTraitDefinitionRequestBody" was null or undefined when calling updateEntityTraitDefinition().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["X-Schematic-Api-Key"] = await this.configuration.apiKey(
        "X-Schematic-Api-Key",
      ); // ApiKeyAuth authentication
    }

    const response = await this.request(
      {
        path: `/entity-trait-definitions/{entity_trait_definition_id}`.replace(
          `{${"entity_trait_definition_id"}}`,
          encodeURIComponent(
            String(requestParameters["entityTraitDefinitionId"]),
          ),
        ),
        method: "PUT",
        headers: headerParameters,
        query: queryParameters,
        body: UpdateEntityTraitDefinitionRequestBodyToJSON(
          requestParameters["updateEntityTraitDefinitionRequestBody"],
        ),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      UpdateEntityTraitDefinitionResponseFromJSON(jsonValue),
    );
  }

  /**
   * Update entity trait definition
   */
  async updateEntityTraitDefinition(
    requestParameters: UpdateEntityTraitDefinitionRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<UpdateEntityTraitDefinitionResponse> {
    const response = await this.updateEntityTraitDefinitionRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Upsert company
   */
  async upsertCompanyRaw(
    requestParameters: UpsertCompanyRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<UpsertCompanyResponse>> {
    if (requestParameters["upsertCompanyRequestBody"] == null) {
      throw new runtime.RequiredError(
        "upsertCompanyRequestBody",
        'Required parameter "upsertCompanyRequestBody" was null or undefined when calling upsertCompany().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["X-Schematic-Api-Key"] = await this.configuration.apiKey(
        "X-Schematic-Api-Key",
      ); // ApiKeyAuth authentication
    }

    const response = await this.request(
      {
        path: `/companies`,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: UpsertCompanyRequestBodyToJSON(
          requestParameters["upsertCompanyRequestBody"],
        ),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      UpsertCompanyResponseFromJSON(jsonValue),
    );
  }

  /**
   * Upsert company
   */
  async upsertCompany(
    requestParameters: UpsertCompanyRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<UpsertCompanyResponse> {
    const response = await this.upsertCompanyRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Upsert company trait
   */
  async upsertCompanyTraitRaw(
    requestParameters: UpsertCompanyTraitRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<UpsertCompanyTraitResponse>> {
    if (requestParameters["upsertTraitRequestBody"] == null) {
      throw new runtime.RequiredError(
        "upsertTraitRequestBody",
        'Required parameter "upsertTraitRequestBody" was null or undefined when calling upsertCompanyTrait().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["X-Schematic-Api-Key"] = await this.configuration.apiKey(
        "X-Schematic-Api-Key",
      ); // ApiKeyAuth authentication
    }

    const response = await this.request(
      {
        path: `/company-traits`,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: UpsertTraitRequestBodyToJSON(
          requestParameters["upsertTraitRequestBody"],
        ),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      UpsertCompanyTraitResponseFromJSON(jsonValue),
    );
  }

  /**
   * Upsert company trait
   */
  async upsertCompanyTrait(
    requestParameters: UpsertCompanyTraitRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<UpsertCompanyTraitResponse> {
    const response = await this.upsertCompanyTraitRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Upsert user
   */
  async upsertUserRaw(
    requestParameters: UpsertUserRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<UpsertUserResponse>> {
    if (requestParameters["upsertUserRequestBody"] == null) {
      throw new runtime.RequiredError(
        "upsertUserRequestBody",
        'Required parameter "upsertUserRequestBody" was null or undefined when calling upsertUser().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["X-Schematic-Api-Key"] = await this.configuration.apiKey(
        "X-Schematic-Api-Key",
      ); // ApiKeyAuth authentication
    }

    const response = await this.request(
      {
        path: `/users`,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: UpsertUserRequestBodyToJSON(
          requestParameters["upsertUserRequestBody"],
        ),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      UpsertUserResponseFromJSON(jsonValue),
    );
  }

  /**
   * Upsert user
   */
  async upsertUser(
    requestParameters: UpsertUserRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<UpsertUserResponse> {
    const response = await this.upsertUserRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * Upsert user trait
   */
  async upsertUserTraitRaw(
    requestParameters: UpsertUserTraitRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<UpsertUserTraitResponse>> {
    if (requestParameters["upsertTraitRequestBody"] == null) {
      throw new runtime.RequiredError(
        "upsertTraitRequestBody",
        'Required parameter "upsertTraitRequestBody" was null or undefined when calling upsertUserTrait().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["X-Schematic-Api-Key"] = await this.configuration.apiKey(
        "X-Schematic-Api-Key",
      ); // ApiKeyAuth authentication
    }

    const response = await this.request(
      {
        path: `/user-traits`,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: UpsertTraitRequestBodyToJSON(
          requestParameters["upsertTraitRequestBody"],
        ),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      UpsertUserTraitResponseFromJSON(jsonValue),
    );
  }

  /**
   * Upsert user trait
   */
  async upsertUserTrait(
    requestParameters: UpsertUserTraitRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<UpsertUserTraitResponse> {
    const response = await this.upsertUserTraitRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }
}

/**
 * @export
 */
export const CountEntityKeyDefinitionsEntityTypeEnum = {
  Company: "company",
  User: "user",
} as const;
export type CountEntityKeyDefinitionsEntityTypeEnum =
  (typeof CountEntityKeyDefinitionsEntityTypeEnum)[keyof typeof CountEntityKeyDefinitionsEntityTypeEnum];
/**
 * @export
 */
export const CountEntityTraitDefinitionsEntityTypeEnum = {
  Company: "company",
  User: "user",
} as const;
export type CountEntityTraitDefinitionsEntityTypeEnum =
  (typeof CountEntityTraitDefinitionsEntityTypeEnum)[keyof typeof CountEntityTraitDefinitionsEntityTypeEnum];
/**
 * @export
 */
export const CountEntityTraitDefinitionsTraitTypeEnum = {
  Boolean: "boolean",
  Currency: "currency",
  Date: "date",
  Number: "number",
  String: "string",
  Url: "url",
} as const;
export type CountEntityTraitDefinitionsTraitTypeEnum =
  (typeof CountEntityTraitDefinitionsTraitTypeEnum)[keyof typeof CountEntityTraitDefinitionsTraitTypeEnum];
/**
 * @export
 */
export const ListEntityKeyDefinitionsEntityTypeEnum = {
  Company: "company",
  User: "user",
} as const;
export type ListEntityKeyDefinitionsEntityTypeEnum =
  (typeof ListEntityKeyDefinitionsEntityTypeEnum)[keyof typeof ListEntityKeyDefinitionsEntityTypeEnum];
/**
 * @export
 */
export const ListEntityTraitDefinitionsEntityTypeEnum = {
  Company: "company",
  User: "user",
} as const;
export type ListEntityTraitDefinitionsEntityTypeEnum =
  (typeof ListEntityTraitDefinitionsEntityTypeEnum)[keyof typeof ListEntityTraitDefinitionsEntityTypeEnum];
/**
 * @export
 */
export const ListEntityTraitDefinitionsTraitTypeEnum = {
  Boolean: "boolean",
  Currency: "currency",
  Date: "date",
  Number: "number",
  String: "string",
  Url: "url",
} as const;
export type ListEntityTraitDefinitionsTraitTypeEnum =
  (typeof ListEntityTraitDefinitionsTraitTypeEnum)[keyof typeof ListEntityTraitDefinitionsTraitTypeEnum];
