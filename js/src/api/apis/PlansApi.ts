/* tslint:disable */
/* eslint-disable */
/**
 * Schematic API
 * Schematic API
 *
 * The version of the OpenAPI document: 0.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from "../runtime";
import type {
  ApiError,
  CountPlansResponse,
  CreatePlanRequestBody,
  CreatePlanResponse,
  DeleteAudienceResponse,
  DeletePlanResponse,
  GetAudienceResponse,
  GetPlanResponse,
  ListPlansResponse,
  UpdateAudienceRequestBody,
  UpdateAudienceResponse,
  UpdatePlanRequestBody,
  UpdatePlanResponse,
  UpsertBillingProductPlanResponse,
  UpsertBillingProductRequestBody,
} from "../models/index";
import {
  ApiErrorFromJSON,
  ApiErrorToJSON,
  CountPlansResponseFromJSON,
  CountPlansResponseToJSON,
  CreatePlanRequestBodyFromJSON,
  CreatePlanRequestBodyToJSON,
  CreatePlanResponseFromJSON,
  CreatePlanResponseToJSON,
  DeleteAudienceResponseFromJSON,
  DeleteAudienceResponseToJSON,
  DeletePlanResponseFromJSON,
  DeletePlanResponseToJSON,
  GetAudienceResponseFromJSON,
  GetAudienceResponseToJSON,
  GetPlanResponseFromJSON,
  GetPlanResponseToJSON,
  ListPlansResponseFromJSON,
  ListPlansResponseToJSON,
  UpdateAudienceRequestBodyFromJSON,
  UpdateAudienceRequestBodyToJSON,
  UpdateAudienceResponseFromJSON,
  UpdateAudienceResponseToJSON,
  UpdatePlanRequestBodyFromJSON,
  UpdatePlanRequestBodyToJSON,
  UpdatePlanResponseFromJSON,
  UpdatePlanResponseToJSON,
  UpsertBillingProductPlanResponseFromJSON,
  UpsertBillingProductPlanResponseToJSON,
  UpsertBillingProductRequestBodyFromJSON,
  UpsertBillingProductRequestBodyToJSON,
} from "../models/index";

export interface CountPlansRequest {
  companyId?: string;
  hasProductId?: boolean;
  ids?: Array<string>;
  planType?: CountPlansPlanTypeEnum;
  q?: string;
  withoutEntitlementFor?: string;
  withoutProductId?: boolean;
  limit?: number;
  offset?: number;
}

export interface CreatePlanRequest {
  createPlanRequestBody: CreatePlanRequestBody;
}

export interface DeleteAudienceRequest {
  planAudienceId: string;
}

export interface DeletePlanRequest {
  planId: string;
}

export interface GetAudienceRequest {
  planAudienceId: string;
}

export interface GetPlanRequest {
  planId: string;
}

export interface ListPlansRequest {
  companyId?: string;
  hasProductId?: boolean;
  ids?: Array<string>;
  planType?: ListPlansPlanTypeEnum;
  q?: string;
  withoutEntitlementFor?: string;
  withoutProductId?: boolean;
  limit?: number;
  offset?: number;
}

export interface UpdateAudienceRequest {
  planAudienceId: string;
  updateAudienceRequestBody: UpdateAudienceRequestBody;
}

export interface UpdatePlanRequest {
  planId: string;
  updatePlanRequestBody: UpdatePlanRequestBody;
}

export interface UpsertBillingProductPlanRequest {
  planId: string;
  upsertBillingProductRequestBody: UpsertBillingProductRequestBody;
}

/**
 *
 */
export class PlansApi extends runtime.BaseAPI {
  /**
   * Count plans
   */
  async countPlansRaw(
    requestParameters: CountPlansRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<CountPlansResponse>> {
    const queryParameters: any = {};

    if (requestParameters["companyId"] != null) {
      queryParameters["company_id"] = requestParameters["companyId"];
    }

    if (requestParameters["hasProductId"] != null) {
      queryParameters["has_product_id"] = requestParameters["hasProductId"];
    }

    if (requestParameters["ids"] != null) {
      queryParameters["ids"] = requestParameters["ids"];
    }

    if (requestParameters["planType"] != null) {
      queryParameters["plan_type"] = requestParameters["planType"];
    }

    if (requestParameters["q"] != null) {
      queryParameters["q"] = requestParameters["q"];
    }

    if (requestParameters["withoutEntitlementFor"] != null) {
      queryParameters["without_entitlement_for"] =
        requestParameters["withoutEntitlementFor"];
    }

    if (requestParameters["withoutProductId"] != null) {
      queryParameters["without_product_id"] =
        requestParameters["withoutProductId"];
    }

    if (requestParameters["limit"] != null) {
      queryParameters["limit"] = requestParameters["limit"];
    }

    if (requestParameters["offset"] != null) {
      queryParameters["offset"] = requestParameters["offset"];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["X-Schematic-Api-Key"] = await this.configuration.apiKey(
        "X-Schematic-Api-Key",
      ); // ApiKeyAuth authentication
    }

    const response = await this.request(
      {
        path: `/plans/count`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      CountPlansResponseFromJSON(jsonValue),
    );
  }

  /**
   * Count plans
   */
  async countPlans(
    requestParameters: CountPlansRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<CountPlansResponse> {
    const response = await this.countPlansRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * Create plan
   */
  async createPlanRaw(
    requestParameters: CreatePlanRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<CreatePlanResponse>> {
    if (requestParameters["createPlanRequestBody"] == null) {
      throw new runtime.RequiredError(
        "createPlanRequestBody",
        'Required parameter "createPlanRequestBody" was null or undefined when calling createPlan().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["X-Schematic-Api-Key"] = await this.configuration.apiKey(
        "X-Schematic-Api-Key",
      ); // ApiKeyAuth authentication
    }

    const response = await this.request(
      {
        path: `/plans`,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: CreatePlanRequestBodyToJSON(
          requestParameters["createPlanRequestBody"],
        ),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      CreatePlanResponseFromJSON(jsonValue),
    );
  }

  /**
   * Create plan
   */
  async createPlan(
    requestParameters: CreatePlanRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<CreatePlanResponse> {
    const response = await this.createPlanRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * Delete audience
   */
  async deleteAudienceRaw(
    requestParameters: DeleteAudienceRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<DeleteAudienceResponse>> {
    if (requestParameters["planAudienceId"] == null) {
      throw new runtime.RequiredError(
        "planAudienceId",
        'Required parameter "planAudienceId" was null or undefined when calling deleteAudience().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["X-Schematic-Api-Key"] = await this.configuration.apiKey(
        "X-Schematic-Api-Key",
      ); // ApiKeyAuth authentication
    }

    const response = await this.request(
      {
        path: `/plan-audiences/{plan_audience_id}`.replace(
          `{${"plan_audience_id"}}`,
          encodeURIComponent(String(requestParameters["planAudienceId"])),
        ),
        method: "DELETE",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      DeleteAudienceResponseFromJSON(jsonValue),
    );
  }

  /**
   * Delete audience
   */
  async deleteAudience(
    requestParameters: DeleteAudienceRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<DeleteAudienceResponse> {
    const response = await this.deleteAudienceRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Delete plan
   */
  async deletePlanRaw(
    requestParameters: DeletePlanRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<DeletePlanResponse>> {
    if (requestParameters["planId"] == null) {
      throw new runtime.RequiredError(
        "planId",
        'Required parameter "planId" was null or undefined when calling deletePlan().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["X-Schematic-Api-Key"] = await this.configuration.apiKey(
        "X-Schematic-Api-Key",
      ); // ApiKeyAuth authentication
    }

    const response = await this.request(
      {
        path: `/plans/{plan_id}`.replace(
          `{${"plan_id"}}`,
          encodeURIComponent(String(requestParameters["planId"])),
        ),
        method: "DELETE",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      DeletePlanResponseFromJSON(jsonValue),
    );
  }

  /**
   * Delete plan
   */
  async deletePlan(
    requestParameters: DeletePlanRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<DeletePlanResponse> {
    const response = await this.deletePlanRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * Get audience
   */
  async getAudienceRaw(
    requestParameters: GetAudienceRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<GetAudienceResponse>> {
    if (requestParameters["planAudienceId"] == null) {
      throw new runtime.RequiredError(
        "planAudienceId",
        'Required parameter "planAudienceId" was null or undefined when calling getAudience().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["X-Schematic-Api-Key"] = await this.configuration.apiKey(
        "X-Schematic-Api-Key",
      ); // ApiKeyAuth authentication
    }

    const response = await this.request(
      {
        path: `/plan-audiences/{plan_audience_id}`.replace(
          `{${"plan_audience_id"}}`,
          encodeURIComponent(String(requestParameters["planAudienceId"])),
        ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      GetAudienceResponseFromJSON(jsonValue),
    );
  }

  /**
   * Get audience
   */
  async getAudience(
    requestParameters: GetAudienceRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<GetAudienceResponse> {
    const response = await this.getAudienceRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Get plan
   */
  async getPlanRaw(
    requestParameters: GetPlanRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<GetPlanResponse>> {
    if (requestParameters["planId"] == null) {
      throw new runtime.RequiredError(
        "planId",
        'Required parameter "planId" was null or undefined when calling getPlan().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["X-Schematic-Api-Key"] = await this.configuration.apiKey(
        "X-Schematic-Api-Key",
      ); // ApiKeyAuth authentication
    }

    const response = await this.request(
      {
        path: `/plans/{plan_id}`.replace(
          `{${"plan_id"}}`,
          encodeURIComponent(String(requestParameters["planId"])),
        ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      GetPlanResponseFromJSON(jsonValue),
    );
  }

  /**
   * Get plan
   */
  async getPlan(
    requestParameters: GetPlanRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<GetPlanResponse> {
    const response = await this.getPlanRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * List plans
   */
  async listPlansRaw(
    requestParameters: ListPlansRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<ListPlansResponse>> {
    const queryParameters: any = {};

    if (requestParameters["companyId"] != null) {
      queryParameters["company_id"] = requestParameters["companyId"];
    }

    if (requestParameters["hasProductId"] != null) {
      queryParameters["has_product_id"] = requestParameters["hasProductId"];
    }

    if (requestParameters["ids"] != null) {
      queryParameters["ids"] = requestParameters["ids"];
    }

    if (requestParameters["planType"] != null) {
      queryParameters["plan_type"] = requestParameters["planType"];
    }

    if (requestParameters["q"] != null) {
      queryParameters["q"] = requestParameters["q"];
    }

    if (requestParameters["withoutEntitlementFor"] != null) {
      queryParameters["without_entitlement_for"] =
        requestParameters["withoutEntitlementFor"];
    }

    if (requestParameters["withoutProductId"] != null) {
      queryParameters["without_product_id"] =
        requestParameters["withoutProductId"];
    }

    if (requestParameters["limit"] != null) {
      queryParameters["limit"] = requestParameters["limit"];
    }

    if (requestParameters["offset"] != null) {
      queryParameters["offset"] = requestParameters["offset"];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["X-Schematic-Api-Key"] = await this.configuration.apiKey(
        "X-Schematic-Api-Key",
      ); // ApiKeyAuth authentication
    }

    const response = await this.request(
      {
        path: `/plans`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      ListPlansResponseFromJSON(jsonValue),
    );
  }

  /**
   * List plans
   */
  async listPlans(
    requestParameters: ListPlansRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<ListPlansResponse> {
    const response = await this.listPlansRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * Update audience
   */
  async updateAudienceRaw(
    requestParameters: UpdateAudienceRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<UpdateAudienceResponse>> {
    if (requestParameters["planAudienceId"] == null) {
      throw new runtime.RequiredError(
        "planAudienceId",
        'Required parameter "planAudienceId" was null or undefined when calling updateAudience().',
      );
    }

    if (requestParameters["updateAudienceRequestBody"] == null) {
      throw new runtime.RequiredError(
        "updateAudienceRequestBody",
        'Required parameter "updateAudienceRequestBody" was null or undefined when calling updateAudience().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["X-Schematic-Api-Key"] = await this.configuration.apiKey(
        "X-Schematic-Api-Key",
      ); // ApiKeyAuth authentication
    }

    const response = await this.request(
      {
        path: `/plan-audiences/{plan_audience_id}`.replace(
          `{${"plan_audience_id"}}`,
          encodeURIComponent(String(requestParameters["planAudienceId"])),
        ),
        method: "PUT",
        headers: headerParameters,
        query: queryParameters,
        body: UpdateAudienceRequestBodyToJSON(
          requestParameters["updateAudienceRequestBody"],
        ),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      UpdateAudienceResponseFromJSON(jsonValue),
    );
  }

  /**
   * Update audience
   */
  async updateAudience(
    requestParameters: UpdateAudienceRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<UpdateAudienceResponse> {
    const response = await this.updateAudienceRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Update plan
   */
  async updatePlanRaw(
    requestParameters: UpdatePlanRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<UpdatePlanResponse>> {
    if (requestParameters["planId"] == null) {
      throw new runtime.RequiredError(
        "planId",
        'Required parameter "planId" was null or undefined when calling updatePlan().',
      );
    }

    if (requestParameters["updatePlanRequestBody"] == null) {
      throw new runtime.RequiredError(
        "updatePlanRequestBody",
        'Required parameter "updatePlanRequestBody" was null or undefined when calling updatePlan().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["X-Schematic-Api-Key"] = await this.configuration.apiKey(
        "X-Schematic-Api-Key",
      ); // ApiKeyAuth authentication
    }

    const response = await this.request(
      {
        path: `/plans/{plan_id}`.replace(
          `{${"plan_id"}}`,
          encodeURIComponent(String(requestParameters["planId"])),
        ),
        method: "PUT",
        headers: headerParameters,
        query: queryParameters,
        body: UpdatePlanRequestBodyToJSON(
          requestParameters["updatePlanRequestBody"],
        ),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      UpdatePlanResponseFromJSON(jsonValue),
    );
  }

  /**
   * Update plan
   */
  async updatePlan(
    requestParameters: UpdatePlanRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<UpdatePlanResponse> {
    const response = await this.updatePlanRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * Upsert billing product plan
   */
  async upsertBillingProductPlanRaw(
    requestParameters: UpsertBillingProductPlanRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<UpsertBillingProductPlanResponse>> {
    if (requestParameters["planId"] == null) {
      throw new runtime.RequiredError(
        "planId",
        'Required parameter "planId" was null or undefined when calling upsertBillingProductPlan().',
      );
    }

    if (requestParameters["upsertBillingProductRequestBody"] == null) {
      throw new runtime.RequiredError(
        "upsertBillingProductRequestBody",
        'Required parameter "upsertBillingProductRequestBody" was null or undefined when calling upsertBillingProductPlan().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["X-Schematic-Api-Key"] = await this.configuration.apiKey(
        "X-Schematic-Api-Key",
      ); // ApiKeyAuth authentication
    }

    const response = await this.request(
      {
        path: `/plans/{plan_id}/billing_products`.replace(
          `{${"plan_id"}}`,
          encodeURIComponent(String(requestParameters["planId"])),
        ),
        method: "PUT",
        headers: headerParameters,
        query: queryParameters,
        body: UpsertBillingProductRequestBodyToJSON(
          requestParameters["upsertBillingProductRequestBody"],
        ),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      UpsertBillingProductPlanResponseFromJSON(jsonValue),
    );
  }

  /**
   * Upsert billing product plan
   */
  async upsertBillingProductPlan(
    requestParameters: UpsertBillingProductPlanRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<UpsertBillingProductPlanResponse> {
    const response = await this.upsertBillingProductPlanRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }
}

/**
 * @export
 */
export const CountPlansPlanTypeEnum = {
  Plan: "plan",
  AddOn: "add_on",
} as const;
export type CountPlansPlanTypeEnum =
  (typeof CountPlansPlanTypeEnum)[keyof typeof CountPlansPlanTypeEnum];
/**
 * @export
 */
export const ListPlansPlanTypeEnum = {
  Plan: "plan",
  AddOn: "add_on",
} as const;
export type ListPlansPlanTypeEnum =
  (typeof ListPlansPlanTypeEnum)[keyof typeof ListPlansPlanTypeEnum];
