/* tslint:disable */
/* eslint-disable */
/**
 * Schematic API
 * Schematic API
 *
 * The version of the OpenAPI document: 0.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from "../runtime";
import type {
  ApiError,
  AudienceRequestBody,
  CheckFlagRequestBody,
  CheckFlagResponse,
  CheckFlagsResponse,
  CountAudienceCompaniesResponse,
  CountAudienceUsersResponse,
  CountFeaturesResponse,
  CountFlagsResponse,
  CreateFeatureRequestBody,
  CreateFeatureResponse,
  CreateFlagRequestBody,
  CreateFlagResponse,
  DeleteFeatureResponse,
  DeleteFlagResponse,
  GetFeatureResponse,
  GetFlagResponse,
  ListAudienceCompaniesResponse,
  ListAudienceUsersResponse,
  ListFeaturesResponse,
  ListFlagsResponse,
  UpdateFeatureRequestBody,
  UpdateFeatureResponse,
  UpdateFlagResponse,
  UpdateFlagRulesRequestBody,
  UpdateFlagRulesResponse,
} from "../models/index";
import {
  ApiErrorFromJSON,
  ApiErrorToJSON,
  AudienceRequestBodyFromJSON,
  AudienceRequestBodyToJSON,
  CheckFlagRequestBodyFromJSON,
  CheckFlagRequestBodyToJSON,
  CheckFlagResponseFromJSON,
  CheckFlagResponseToJSON,
  CheckFlagsResponseFromJSON,
  CheckFlagsResponseToJSON,
  CountAudienceCompaniesResponseFromJSON,
  CountAudienceCompaniesResponseToJSON,
  CountAudienceUsersResponseFromJSON,
  CountAudienceUsersResponseToJSON,
  CountFeaturesResponseFromJSON,
  CountFeaturesResponseToJSON,
  CountFlagsResponseFromJSON,
  CountFlagsResponseToJSON,
  CreateFeatureRequestBodyFromJSON,
  CreateFeatureRequestBodyToJSON,
  CreateFeatureResponseFromJSON,
  CreateFeatureResponseToJSON,
  CreateFlagRequestBodyFromJSON,
  CreateFlagRequestBodyToJSON,
  CreateFlagResponseFromJSON,
  CreateFlagResponseToJSON,
  DeleteFeatureResponseFromJSON,
  DeleteFeatureResponseToJSON,
  DeleteFlagResponseFromJSON,
  DeleteFlagResponseToJSON,
  GetFeatureResponseFromJSON,
  GetFeatureResponseToJSON,
  GetFlagResponseFromJSON,
  GetFlagResponseToJSON,
  ListAudienceCompaniesResponseFromJSON,
  ListAudienceCompaniesResponseToJSON,
  ListAudienceUsersResponseFromJSON,
  ListAudienceUsersResponseToJSON,
  ListFeaturesResponseFromJSON,
  ListFeaturesResponseToJSON,
  ListFlagsResponseFromJSON,
  ListFlagsResponseToJSON,
  UpdateFeatureRequestBodyFromJSON,
  UpdateFeatureRequestBodyToJSON,
  UpdateFeatureResponseFromJSON,
  UpdateFeatureResponseToJSON,
  UpdateFlagResponseFromJSON,
  UpdateFlagResponseToJSON,
  UpdateFlagRulesRequestBodyFromJSON,
  UpdateFlagRulesRequestBodyToJSON,
  UpdateFlagRulesResponseFromJSON,
  UpdateFlagRulesResponseToJSON,
} from "../models/index";

export interface CheckFlagRequest {
  key: string;
  checkFlagRequestBody: CheckFlagRequestBody;
}

export interface CheckFlagsRequest {
  checkFlagRequestBody: CheckFlagRequestBody;
}

export interface CountAudienceCompaniesRequest {
  audienceRequestBody: AudienceRequestBody;
}

export interface CountAudienceUsersRequest {
  audienceRequestBody: AudienceRequestBody;
}

export interface CountFeaturesRequest {
  ids?: Array<string>;
  q?: string;
  withoutCompanyOverrideFor?: string;
  withoutPlanEntitlementFor?: string;
  limit?: number;
  offset?: number;
}

export interface CountFlagsRequest {
  featureId?: string;
  ids?: Array<string>;
  q?: string;
  limit?: number;
  offset?: number;
}

export interface CreateFeatureRequest {
  createFeatureRequestBody: CreateFeatureRequestBody;
}

export interface CreateFlagRequest {
  createFlagRequestBody: CreateFlagRequestBody;
}

export interface DeleteFeatureRequest {
  featureId: string;
}

export interface DeleteFlagRequest {
  flagId: string;
}

export interface GetFeatureRequest {
  featureId: string;
}

export interface GetFlagRequest {
  flagId: string;
}

export interface ListAudienceCompaniesRequest {
  audienceRequestBody: AudienceRequestBody;
}

export interface ListAudienceUsersRequest {
  audienceRequestBody: AudienceRequestBody;
}

export interface ListFeaturesRequest {
  ids?: Array<string>;
  q?: string;
  withoutCompanyOverrideFor?: string;
  withoutPlanEntitlementFor?: string;
  limit?: number;
  offset?: number;
}

export interface ListFlagsRequest {
  featureId?: string;
  ids?: Array<string>;
  q?: string;
  limit?: number;
  offset?: number;
}

export interface UpdateFeatureRequest {
  featureId: string;
  updateFeatureRequestBody: UpdateFeatureRequestBody;
}

export interface UpdateFlagRequest {
  flagId: string;
  createFlagRequestBody: CreateFlagRequestBody;
}

export interface UpdateFlagRulesRequest {
  flagId: string;
  updateFlagRulesRequestBody: UpdateFlagRulesRequestBody;
}

/**
 *
 */
export class FeaturesApi extends runtime.BaseAPI {
  /**
   * Check flag
   */
  async checkFlagRaw(
    requestParameters: CheckFlagRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<CheckFlagResponse>> {
    if (requestParameters["key"] == null) {
      throw new runtime.RequiredError(
        "key",
        'Required parameter "key" was null or undefined when calling checkFlag().',
      );
    }

    if (requestParameters["checkFlagRequestBody"] == null) {
      throw new runtime.RequiredError(
        "checkFlagRequestBody",
        'Required parameter "checkFlagRequestBody" was null or undefined when calling checkFlag().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["X-Schematic-Api-Key"] = await this.configuration.apiKey(
        "X-Schematic-Api-Key",
      ); // ApiKeyAuth authentication
    }

    const response = await this.request(
      {
        path: `/flags/{key}/check`.replace(
          `{${"key"}}`,
          encodeURIComponent(String(requestParameters["key"])),
        ),
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: CheckFlagRequestBodyToJSON(
          requestParameters["checkFlagRequestBody"],
        ),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      CheckFlagResponseFromJSON(jsonValue),
    );
  }

  /**
   * Check flag
   */
  async checkFlag(
    requestParameters: CheckFlagRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<CheckFlagResponse> {
    const response = await this.checkFlagRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * Check flags
   */
  async checkFlagsRaw(
    requestParameters: CheckFlagsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<CheckFlagsResponse>> {
    if (requestParameters["checkFlagRequestBody"] == null) {
      throw new runtime.RequiredError(
        "checkFlagRequestBody",
        'Required parameter "checkFlagRequestBody" was null or undefined when calling checkFlags().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["X-Schematic-Api-Key"] = await this.configuration.apiKey(
        "X-Schematic-Api-Key",
      ); // ApiKeyAuth authentication
    }

    const response = await this.request(
      {
        path: `/flags/check`,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: CheckFlagRequestBodyToJSON(
          requestParameters["checkFlagRequestBody"],
        ),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      CheckFlagsResponseFromJSON(jsonValue),
    );
  }

  /**
   * Check flags
   */
  async checkFlags(
    requestParameters: CheckFlagsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<CheckFlagsResponse> {
    const response = await this.checkFlagsRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * Count audience companies
   */
  async countAudienceCompaniesRaw(
    requestParameters: CountAudienceCompaniesRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<CountAudienceCompaniesResponse>> {
    if (requestParameters["audienceRequestBody"] == null) {
      throw new runtime.RequiredError(
        "audienceRequestBody",
        'Required parameter "audienceRequestBody" was null or undefined when calling countAudienceCompanies().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["X-Schematic-Api-Key"] = await this.configuration.apiKey(
        "X-Schematic-Api-Key",
      ); // ApiKeyAuth authentication
    }

    const response = await this.request(
      {
        path: `/audience/count-companies`,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: AudienceRequestBodyToJSON(
          requestParameters["audienceRequestBody"],
        ),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      CountAudienceCompaniesResponseFromJSON(jsonValue),
    );
  }

  /**
   * Count audience companies
   */
  async countAudienceCompanies(
    requestParameters: CountAudienceCompaniesRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<CountAudienceCompaniesResponse> {
    const response = await this.countAudienceCompaniesRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Count audience users
   */
  async countAudienceUsersRaw(
    requestParameters: CountAudienceUsersRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<CountAudienceUsersResponse>> {
    if (requestParameters["audienceRequestBody"] == null) {
      throw new runtime.RequiredError(
        "audienceRequestBody",
        'Required parameter "audienceRequestBody" was null or undefined when calling countAudienceUsers().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["X-Schematic-Api-Key"] = await this.configuration.apiKey(
        "X-Schematic-Api-Key",
      ); // ApiKeyAuth authentication
    }

    const response = await this.request(
      {
        path: `/audience/count-users`,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: AudienceRequestBodyToJSON(
          requestParameters["audienceRequestBody"],
        ),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      CountAudienceUsersResponseFromJSON(jsonValue),
    );
  }

  /**
   * Count audience users
   */
  async countAudienceUsers(
    requestParameters: CountAudienceUsersRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<CountAudienceUsersResponse> {
    const response = await this.countAudienceUsersRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Count features
   */
  async countFeaturesRaw(
    requestParameters: CountFeaturesRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<CountFeaturesResponse>> {
    const queryParameters: any = {};

    if (requestParameters["ids"] != null) {
      queryParameters["ids"] = requestParameters["ids"];
    }

    if (requestParameters["q"] != null) {
      queryParameters["q"] = requestParameters["q"];
    }

    if (requestParameters["withoutCompanyOverrideFor"] != null) {
      queryParameters["without_company_override_for"] =
        requestParameters["withoutCompanyOverrideFor"];
    }

    if (requestParameters["withoutPlanEntitlementFor"] != null) {
      queryParameters["without_plan_entitlement_for"] =
        requestParameters["withoutPlanEntitlementFor"];
    }

    if (requestParameters["limit"] != null) {
      queryParameters["limit"] = requestParameters["limit"];
    }

    if (requestParameters["offset"] != null) {
      queryParameters["offset"] = requestParameters["offset"];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["X-Schematic-Api-Key"] = await this.configuration.apiKey(
        "X-Schematic-Api-Key",
      ); // ApiKeyAuth authentication
    }

    const response = await this.request(
      {
        path: `/features/count`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      CountFeaturesResponseFromJSON(jsonValue),
    );
  }

  /**
   * Count features
   */
  async countFeatures(
    requestParameters: CountFeaturesRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<CountFeaturesResponse> {
    const response = await this.countFeaturesRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Count flags
   */
  async countFlagsRaw(
    requestParameters: CountFlagsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<CountFlagsResponse>> {
    const queryParameters: any = {};

    if (requestParameters["featureId"] != null) {
      queryParameters["feature_id"] = requestParameters["featureId"];
    }

    if (requestParameters["ids"] != null) {
      queryParameters["ids"] = requestParameters["ids"];
    }

    if (requestParameters["q"] != null) {
      queryParameters["q"] = requestParameters["q"];
    }

    if (requestParameters["limit"] != null) {
      queryParameters["limit"] = requestParameters["limit"];
    }

    if (requestParameters["offset"] != null) {
      queryParameters["offset"] = requestParameters["offset"];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["X-Schematic-Api-Key"] = await this.configuration.apiKey(
        "X-Schematic-Api-Key",
      ); // ApiKeyAuth authentication
    }

    const response = await this.request(
      {
        path: `/flags/count`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      CountFlagsResponseFromJSON(jsonValue),
    );
  }

  /**
   * Count flags
   */
  async countFlags(
    requestParameters: CountFlagsRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<CountFlagsResponse> {
    const response = await this.countFlagsRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * Create feature
   */
  async createFeatureRaw(
    requestParameters: CreateFeatureRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<CreateFeatureResponse>> {
    if (requestParameters["createFeatureRequestBody"] == null) {
      throw new runtime.RequiredError(
        "createFeatureRequestBody",
        'Required parameter "createFeatureRequestBody" was null or undefined when calling createFeature().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["X-Schematic-Api-Key"] = await this.configuration.apiKey(
        "X-Schematic-Api-Key",
      ); // ApiKeyAuth authentication
    }

    const response = await this.request(
      {
        path: `/features`,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: CreateFeatureRequestBodyToJSON(
          requestParameters["createFeatureRequestBody"],
        ),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      CreateFeatureResponseFromJSON(jsonValue),
    );
  }

  /**
   * Create feature
   */
  async createFeature(
    requestParameters: CreateFeatureRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<CreateFeatureResponse> {
    const response = await this.createFeatureRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Create flag
   */
  async createFlagRaw(
    requestParameters: CreateFlagRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<CreateFlagResponse>> {
    if (requestParameters["createFlagRequestBody"] == null) {
      throw new runtime.RequiredError(
        "createFlagRequestBody",
        'Required parameter "createFlagRequestBody" was null or undefined when calling createFlag().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["X-Schematic-Api-Key"] = await this.configuration.apiKey(
        "X-Schematic-Api-Key",
      ); // ApiKeyAuth authentication
    }

    const response = await this.request(
      {
        path: `/flags`,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: CreateFlagRequestBodyToJSON(
          requestParameters["createFlagRequestBody"],
        ),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      CreateFlagResponseFromJSON(jsonValue),
    );
  }

  /**
   * Create flag
   */
  async createFlag(
    requestParameters: CreateFlagRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<CreateFlagResponse> {
    const response = await this.createFlagRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * Delete feature
   */
  async deleteFeatureRaw(
    requestParameters: DeleteFeatureRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<DeleteFeatureResponse>> {
    if (requestParameters["featureId"] == null) {
      throw new runtime.RequiredError(
        "featureId",
        'Required parameter "featureId" was null or undefined when calling deleteFeature().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["X-Schematic-Api-Key"] = await this.configuration.apiKey(
        "X-Schematic-Api-Key",
      ); // ApiKeyAuth authentication
    }

    const response = await this.request(
      {
        path: `/features/{feature_id}`.replace(
          `{${"feature_id"}}`,
          encodeURIComponent(String(requestParameters["featureId"])),
        ),
        method: "DELETE",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      DeleteFeatureResponseFromJSON(jsonValue),
    );
  }

  /**
   * Delete feature
   */
  async deleteFeature(
    requestParameters: DeleteFeatureRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<DeleteFeatureResponse> {
    const response = await this.deleteFeatureRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Delete flag
   */
  async deleteFlagRaw(
    requestParameters: DeleteFlagRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<DeleteFlagResponse>> {
    if (requestParameters["flagId"] == null) {
      throw new runtime.RequiredError(
        "flagId",
        'Required parameter "flagId" was null or undefined when calling deleteFlag().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["X-Schematic-Api-Key"] = await this.configuration.apiKey(
        "X-Schematic-Api-Key",
      ); // ApiKeyAuth authentication
    }

    const response = await this.request(
      {
        path: `/flags/{flag_id}`.replace(
          `{${"flag_id"}}`,
          encodeURIComponent(String(requestParameters["flagId"])),
        ),
        method: "DELETE",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      DeleteFlagResponseFromJSON(jsonValue),
    );
  }

  /**
   * Delete flag
   */
  async deleteFlag(
    requestParameters: DeleteFlagRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<DeleteFlagResponse> {
    const response = await this.deleteFlagRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * Get feature
   */
  async getFeatureRaw(
    requestParameters: GetFeatureRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<GetFeatureResponse>> {
    if (requestParameters["featureId"] == null) {
      throw new runtime.RequiredError(
        "featureId",
        'Required parameter "featureId" was null or undefined when calling getFeature().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["X-Schematic-Api-Key"] = await this.configuration.apiKey(
        "X-Schematic-Api-Key",
      ); // ApiKeyAuth authentication
    }

    const response = await this.request(
      {
        path: `/features/{feature_id}`.replace(
          `{${"feature_id"}}`,
          encodeURIComponent(String(requestParameters["featureId"])),
        ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      GetFeatureResponseFromJSON(jsonValue),
    );
  }

  /**
   * Get feature
   */
  async getFeature(
    requestParameters: GetFeatureRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<GetFeatureResponse> {
    const response = await this.getFeatureRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * Get flag
   */
  async getFlagRaw(
    requestParameters: GetFlagRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<GetFlagResponse>> {
    if (requestParameters["flagId"] == null) {
      throw new runtime.RequiredError(
        "flagId",
        'Required parameter "flagId" was null or undefined when calling getFlag().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["X-Schematic-Api-Key"] = await this.configuration.apiKey(
        "X-Schematic-Api-Key",
      ); // ApiKeyAuth authentication
    }

    const response = await this.request(
      {
        path: `/flags/{flag_id}`.replace(
          `{${"flag_id"}}`,
          encodeURIComponent(String(requestParameters["flagId"])),
        ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      GetFlagResponseFromJSON(jsonValue),
    );
  }

  /**
   * Get flag
   */
  async getFlag(
    requestParameters: GetFlagRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<GetFlagResponse> {
    const response = await this.getFlagRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * List audience companies
   */
  async listAudienceCompaniesRaw(
    requestParameters: ListAudienceCompaniesRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<ListAudienceCompaniesResponse>> {
    if (requestParameters["audienceRequestBody"] == null) {
      throw new runtime.RequiredError(
        "audienceRequestBody",
        'Required parameter "audienceRequestBody" was null or undefined when calling listAudienceCompanies().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["X-Schematic-Api-Key"] = await this.configuration.apiKey(
        "X-Schematic-Api-Key",
      ); // ApiKeyAuth authentication
    }

    const response = await this.request(
      {
        path: `/audience/get-companies`,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: AudienceRequestBodyToJSON(
          requestParameters["audienceRequestBody"],
        ),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      ListAudienceCompaniesResponseFromJSON(jsonValue),
    );
  }

  /**
   * List audience companies
   */
  async listAudienceCompanies(
    requestParameters: ListAudienceCompaniesRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<ListAudienceCompaniesResponse> {
    const response = await this.listAudienceCompaniesRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * List audience users
   */
  async listAudienceUsersRaw(
    requestParameters: ListAudienceUsersRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<ListAudienceUsersResponse>> {
    if (requestParameters["audienceRequestBody"] == null) {
      throw new runtime.RequiredError(
        "audienceRequestBody",
        'Required parameter "audienceRequestBody" was null or undefined when calling listAudienceUsers().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["X-Schematic-Api-Key"] = await this.configuration.apiKey(
        "X-Schematic-Api-Key",
      ); // ApiKeyAuth authentication
    }

    const response = await this.request(
      {
        path: `/audience/get-users`,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: AudienceRequestBodyToJSON(
          requestParameters["audienceRequestBody"],
        ),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      ListAudienceUsersResponseFromJSON(jsonValue),
    );
  }

  /**
   * List audience users
   */
  async listAudienceUsers(
    requestParameters: ListAudienceUsersRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<ListAudienceUsersResponse> {
    const response = await this.listAudienceUsersRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * List features
   */
  async listFeaturesRaw(
    requestParameters: ListFeaturesRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<ListFeaturesResponse>> {
    const queryParameters: any = {};

    if (requestParameters["ids"] != null) {
      queryParameters["ids"] = requestParameters["ids"];
    }

    if (requestParameters["q"] != null) {
      queryParameters["q"] = requestParameters["q"];
    }

    if (requestParameters["withoutCompanyOverrideFor"] != null) {
      queryParameters["without_company_override_for"] =
        requestParameters["withoutCompanyOverrideFor"];
    }

    if (requestParameters["withoutPlanEntitlementFor"] != null) {
      queryParameters["without_plan_entitlement_for"] =
        requestParameters["withoutPlanEntitlementFor"];
    }

    if (requestParameters["limit"] != null) {
      queryParameters["limit"] = requestParameters["limit"];
    }

    if (requestParameters["offset"] != null) {
      queryParameters["offset"] = requestParameters["offset"];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["X-Schematic-Api-Key"] = await this.configuration.apiKey(
        "X-Schematic-Api-Key",
      ); // ApiKeyAuth authentication
    }

    const response = await this.request(
      {
        path: `/features`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      ListFeaturesResponseFromJSON(jsonValue),
    );
  }

  /**
   * List features
   */
  async listFeatures(
    requestParameters: ListFeaturesRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<ListFeaturesResponse> {
    const response = await this.listFeaturesRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * List flags
   */
  async listFlagsRaw(
    requestParameters: ListFlagsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<ListFlagsResponse>> {
    const queryParameters: any = {};

    if (requestParameters["featureId"] != null) {
      queryParameters["feature_id"] = requestParameters["featureId"];
    }

    if (requestParameters["ids"] != null) {
      queryParameters["ids"] = requestParameters["ids"];
    }

    if (requestParameters["q"] != null) {
      queryParameters["q"] = requestParameters["q"];
    }

    if (requestParameters["limit"] != null) {
      queryParameters["limit"] = requestParameters["limit"];
    }

    if (requestParameters["offset"] != null) {
      queryParameters["offset"] = requestParameters["offset"];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["X-Schematic-Api-Key"] = await this.configuration.apiKey(
        "X-Schematic-Api-Key",
      ); // ApiKeyAuth authentication
    }

    const response = await this.request(
      {
        path: `/flags`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      ListFlagsResponseFromJSON(jsonValue),
    );
  }

  /**
   * List flags
   */
  async listFlags(
    requestParameters: ListFlagsRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<ListFlagsResponse> {
    const response = await this.listFlagsRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * Update feature
   */
  async updateFeatureRaw(
    requestParameters: UpdateFeatureRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<UpdateFeatureResponse>> {
    if (requestParameters["featureId"] == null) {
      throw new runtime.RequiredError(
        "featureId",
        'Required parameter "featureId" was null or undefined when calling updateFeature().',
      );
    }

    if (requestParameters["updateFeatureRequestBody"] == null) {
      throw new runtime.RequiredError(
        "updateFeatureRequestBody",
        'Required parameter "updateFeatureRequestBody" was null or undefined when calling updateFeature().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["X-Schematic-Api-Key"] = await this.configuration.apiKey(
        "X-Schematic-Api-Key",
      ); // ApiKeyAuth authentication
    }

    const response = await this.request(
      {
        path: `/features/{feature_id}`.replace(
          `{${"feature_id"}}`,
          encodeURIComponent(String(requestParameters["featureId"])),
        ),
        method: "PUT",
        headers: headerParameters,
        query: queryParameters,
        body: UpdateFeatureRequestBodyToJSON(
          requestParameters["updateFeatureRequestBody"],
        ),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      UpdateFeatureResponseFromJSON(jsonValue),
    );
  }

  /**
   * Update feature
   */
  async updateFeature(
    requestParameters: UpdateFeatureRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<UpdateFeatureResponse> {
    const response = await this.updateFeatureRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Update flag
   */
  async updateFlagRaw(
    requestParameters: UpdateFlagRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<UpdateFlagResponse>> {
    if (requestParameters["flagId"] == null) {
      throw new runtime.RequiredError(
        "flagId",
        'Required parameter "flagId" was null or undefined when calling updateFlag().',
      );
    }

    if (requestParameters["createFlagRequestBody"] == null) {
      throw new runtime.RequiredError(
        "createFlagRequestBody",
        'Required parameter "createFlagRequestBody" was null or undefined when calling updateFlag().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["X-Schematic-Api-Key"] = await this.configuration.apiKey(
        "X-Schematic-Api-Key",
      ); // ApiKeyAuth authentication
    }

    const response = await this.request(
      {
        path: `/flags/{flag_id}`.replace(
          `{${"flag_id"}}`,
          encodeURIComponent(String(requestParameters["flagId"])),
        ),
        method: "PUT",
        headers: headerParameters,
        query: queryParameters,
        body: CreateFlagRequestBodyToJSON(
          requestParameters["createFlagRequestBody"],
        ),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      UpdateFlagResponseFromJSON(jsonValue),
    );
  }

  /**
   * Update flag
   */
  async updateFlag(
    requestParameters: UpdateFlagRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<UpdateFlagResponse> {
    const response = await this.updateFlagRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * Update flag rules
   */
  async updateFlagRulesRaw(
    requestParameters: UpdateFlagRulesRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<UpdateFlagRulesResponse>> {
    if (requestParameters["flagId"] == null) {
      throw new runtime.RequiredError(
        "flagId",
        'Required parameter "flagId" was null or undefined when calling updateFlagRules().',
      );
    }

    if (requestParameters["updateFlagRulesRequestBody"] == null) {
      throw new runtime.RequiredError(
        "updateFlagRulesRequestBody",
        'Required parameter "updateFlagRulesRequestBody" was null or undefined when calling updateFlagRules().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["X-Schematic-Api-Key"] = await this.configuration.apiKey(
        "X-Schematic-Api-Key",
      ); // ApiKeyAuth authentication
    }

    const response = await this.request(
      {
        path: `/flags/{flag_id}/rules`.replace(
          `{${"flag_id"}}`,
          encodeURIComponent(String(requestParameters["flagId"])),
        ),
        method: "PUT",
        headers: headerParameters,
        query: queryParameters,
        body: UpdateFlagRulesRequestBodyToJSON(
          requestParameters["updateFlagRulesRequestBody"],
        ),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      UpdateFlagRulesResponseFromJSON(jsonValue),
    );
  }

  /**
   * Update flag rules
   */
  async updateFlagRules(
    requestParameters: UpdateFlagRulesRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<UpdateFlagRulesResponse> {
    const response = await this.updateFlagRulesRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }
}
