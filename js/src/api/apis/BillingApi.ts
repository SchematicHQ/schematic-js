/* tslint:disable */
/* eslint-disable */
/**
 * Schematic API
 * Schematic API
 *
 * The version of the OpenAPI document: 0.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from "../runtime";
import type {
  ApiError,
  CountBillingProductsResponse,
  CountCustomersResponse,
  CreateBillingCustomerRequestBody,
  CreateBillingPriceRequestBody,
  CreateBillingProductRequestBody,
  CreateBillingSubscriptionsRequestBody,
  CreateInvoiceRequestBody,
  CreateMeterRequestBody,
  CreatePaymentMethodRequestBody,
  DeleteProductPriceResponse,
  ListBillingProductsResponse,
  ListCustomersResponse,
  ListInvoicesResponse,
  ListMetersResponse,
  ListPaymentMethodsResponse,
  ListProductPricesResponse,
  SearchBillingPricesResponse,
  UpsertBillingCustomerResponse,
  UpsertBillingMeterResponse,
  UpsertBillingPriceResponse,
  UpsertBillingProductResponse,
  UpsertBillingSubscriptionResponse,
  UpsertInvoiceResponse,
  UpsertPaymentMethodResponse,
} from "../models/index";
import {
  ApiErrorFromJSON,
  ApiErrorToJSON,
  CountBillingProductsResponseFromJSON,
  CountBillingProductsResponseToJSON,
  CountCustomersResponseFromJSON,
  CountCustomersResponseToJSON,
  CreateBillingCustomerRequestBodyFromJSON,
  CreateBillingCustomerRequestBodyToJSON,
  CreateBillingPriceRequestBodyFromJSON,
  CreateBillingPriceRequestBodyToJSON,
  CreateBillingProductRequestBodyFromJSON,
  CreateBillingProductRequestBodyToJSON,
  CreateBillingSubscriptionsRequestBodyFromJSON,
  CreateBillingSubscriptionsRequestBodyToJSON,
  CreateInvoiceRequestBodyFromJSON,
  CreateInvoiceRequestBodyToJSON,
  CreateMeterRequestBodyFromJSON,
  CreateMeterRequestBodyToJSON,
  CreatePaymentMethodRequestBodyFromJSON,
  CreatePaymentMethodRequestBodyToJSON,
  DeleteProductPriceResponseFromJSON,
  DeleteProductPriceResponseToJSON,
  ListBillingProductsResponseFromJSON,
  ListBillingProductsResponseToJSON,
  ListCustomersResponseFromJSON,
  ListCustomersResponseToJSON,
  ListInvoicesResponseFromJSON,
  ListInvoicesResponseToJSON,
  ListMetersResponseFromJSON,
  ListMetersResponseToJSON,
  ListPaymentMethodsResponseFromJSON,
  ListPaymentMethodsResponseToJSON,
  ListProductPricesResponseFromJSON,
  ListProductPricesResponseToJSON,
  SearchBillingPricesResponseFromJSON,
  SearchBillingPricesResponseToJSON,
  UpsertBillingCustomerResponseFromJSON,
  UpsertBillingCustomerResponseToJSON,
  UpsertBillingMeterResponseFromJSON,
  UpsertBillingMeterResponseToJSON,
  UpsertBillingPriceResponseFromJSON,
  UpsertBillingPriceResponseToJSON,
  UpsertBillingProductResponseFromJSON,
  UpsertBillingProductResponseToJSON,
  UpsertBillingSubscriptionResponseFromJSON,
  UpsertBillingSubscriptionResponseToJSON,
  UpsertInvoiceResponseFromJSON,
  UpsertInvoiceResponseToJSON,
  UpsertPaymentMethodResponseFromJSON,
  UpsertPaymentMethodResponseToJSON,
} from "../models/index";

export interface CountBillingProductsRequest {
  ids?: Array<string>;
  name?: string;
  q?: string;
  priceUsageType?: string;
  withoutLinkedToPlan?: boolean;
  withZeroPrice?: boolean;
  withPricesOnly?: boolean;
  limit?: number;
  offset?: number;
}

export interface CountCustomersRequest {
  name?: string;
  failedToImport?: boolean;
  q?: string;
  limit?: number;
  offset?: number;
}

export interface DeleteProductPriceRequest {
  billingId: string;
}

export interface ListBillingProductsRequest {
  ids?: Array<string>;
  name?: string;
  q?: string;
  priceUsageType?: string;
  withoutLinkedToPlan?: boolean;
  withZeroPrice?: boolean;
  withPricesOnly?: boolean;
  limit?: number;
  offset?: number;
}

export interface ListCustomersRequest {
  name?: string;
  failedToImport?: boolean;
  q?: string;
  limit?: number;
  offset?: number;
}

export interface ListInvoicesRequest {
  customerExternalId: string;
  companyId?: string;
  subscriptionExternalId?: string;
  limit?: number;
  offset?: number;
}

export interface ListMetersRequest {
  displayName?: string;
  limit?: number;
  offset?: number;
}

export interface ListPaymentMethodsRequest {
  customerExternalId: string;
  companyId?: string;
  subscriptionExternalId?: string;
  limit?: number;
  offset?: number;
}

export interface ListProductPricesRequest {
  ids?: Array<string>;
  name?: string;
  q?: string;
  priceUsageType?: string;
  withoutLinkedToPlan?: boolean;
  withZeroPrice?: boolean;
  withPricesOnly?: boolean;
  limit?: number;
  offset?: number;
}

export interface SearchBillingPricesRequest {
  ids?: Array<string>;
  interval?: string;
  usageType?: string;
  price?: number;
  limit?: number;
  offset?: number;
}

export interface UpsertBillingCustomerRequest {
  createBillingCustomerRequestBody: CreateBillingCustomerRequestBody;
}

export interface UpsertBillingMeterRequest {
  createMeterRequestBody: CreateMeterRequestBody;
}

export interface UpsertBillingPriceRequest {
  createBillingPriceRequestBody: CreateBillingPriceRequestBody;
}

export interface UpsertBillingProductRequest {
  createBillingProductRequestBody: CreateBillingProductRequestBody;
}

export interface UpsertBillingSubscriptionRequest {
  createBillingSubscriptionsRequestBody: CreateBillingSubscriptionsRequestBody;
}

export interface UpsertInvoiceRequest {
  createInvoiceRequestBody: CreateInvoiceRequestBody;
}

export interface UpsertPaymentMethodRequest {
  createPaymentMethodRequestBody: CreatePaymentMethodRequestBody;
}

/**
 *
 */
export class BillingApi extends runtime.BaseAPI {
  /**
   * Count billing products
   */
  async countBillingProductsRaw(
    requestParameters: CountBillingProductsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<CountBillingProductsResponse>> {
    const queryParameters: any = {};

    if (requestParameters["ids"] != null) {
      queryParameters["ids"] = requestParameters["ids"];
    }

    if (requestParameters["name"] != null) {
      queryParameters["name"] = requestParameters["name"];
    }

    if (requestParameters["q"] != null) {
      queryParameters["q"] = requestParameters["q"];
    }

    if (requestParameters["priceUsageType"] != null) {
      queryParameters["price_usage_type"] = requestParameters["priceUsageType"];
    }

    if (requestParameters["withoutLinkedToPlan"] != null) {
      queryParameters["without_linked_to_plan"] =
        requestParameters["withoutLinkedToPlan"];
    }

    if (requestParameters["withZeroPrice"] != null) {
      queryParameters["with_zero_price"] = requestParameters["withZeroPrice"];
    }

    if (requestParameters["withPricesOnly"] != null) {
      queryParameters["with_prices_only"] = requestParameters["withPricesOnly"];
    }

    if (requestParameters["limit"] != null) {
      queryParameters["limit"] = requestParameters["limit"];
    }

    if (requestParameters["offset"] != null) {
      queryParameters["offset"] = requestParameters["offset"];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["X-Schematic-Api-Key"] = await this.configuration.apiKey(
        "X-Schematic-Api-Key",
      ); // ApiKeyAuth authentication
    }

    const response = await this.request(
      {
        path: `/billing/products/count`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      CountBillingProductsResponseFromJSON(jsonValue),
    );
  }

  /**
   * Count billing products
   */
  async countBillingProducts(
    requestParameters: CountBillingProductsRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<CountBillingProductsResponse> {
    const response = await this.countBillingProductsRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Count customers
   */
  async countCustomersRaw(
    requestParameters: CountCustomersRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<CountCustomersResponse>> {
    const queryParameters: any = {};

    if (requestParameters["name"] != null) {
      queryParameters["name"] = requestParameters["name"];
    }

    if (requestParameters["failedToImport"] != null) {
      queryParameters["failed_to_import"] = requestParameters["failedToImport"];
    }

    if (requestParameters["q"] != null) {
      queryParameters["q"] = requestParameters["q"];
    }

    if (requestParameters["limit"] != null) {
      queryParameters["limit"] = requestParameters["limit"];
    }

    if (requestParameters["offset"] != null) {
      queryParameters["offset"] = requestParameters["offset"];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["X-Schematic-Api-Key"] = await this.configuration.apiKey(
        "X-Schematic-Api-Key",
      ); // ApiKeyAuth authentication
    }

    const response = await this.request(
      {
        path: `/billing/customers/count`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      CountCustomersResponseFromJSON(jsonValue),
    );
  }

  /**
   * Count customers
   */
  async countCustomers(
    requestParameters: CountCustomersRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<CountCustomersResponse> {
    const response = await this.countCustomersRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Delete product price
   */
  async deleteProductPriceRaw(
    requestParameters: DeleteProductPriceRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<DeleteProductPriceResponse>> {
    if (requestParameters["billingId"] == null) {
      throw new runtime.RequiredError(
        "billingId",
        'Required parameter "billingId" was null or undefined when calling deleteProductPrice().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["X-Schematic-Api-Key"] = await this.configuration.apiKey(
        "X-Schematic-Api-Key",
      ); // ApiKeyAuth authentication
    }

    const response = await this.request(
      {
        path: `/billing/product/prices/{billing_id}`.replace(
          `{${"billing_id"}}`,
          encodeURIComponent(String(requestParameters["billingId"])),
        ),
        method: "DELETE",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      DeleteProductPriceResponseFromJSON(jsonValue),
    );
  }

  /**
   * Delete product price
   */
  async deleteProductPrice(
    requestParameters: DeleteProductPriceRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<DeleteProductPriceResponse> {
    const response = await this.deleteProductPriceRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * List billing products
   */
  async listBillingProductsRaw(
    requestParameters: ListBillingProductsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<ListBillingProductsResponse>> {
    const queryParameters: any = {};

    if (requestParameters["ids"] != null) {
      queryParameters["ids"] = requestParameters["ids"];
    }

    if (requestParameters["name"] != null) {
      queryParameters["name"] = requestParameters["name"];
    }

    if (requestParameters["q"] != null) {
      queryParameters["q"] = requestParameters["q"];
    }

    if (requestParameters["priceUsageType"] != null) {
      queryParameters["price_usage_type"] = requestParameters["priceUsageType"];
    }

    if (requestParameters["withoutLinkedToPlan"] != null) {
      queryParameters["without_linked_to_plan"] =
        requestParameters["withoutLinkedToPlan"];
    }

    if (requestParameters["withZeroPrice"] != null) {
      queryParameters["with_zero_price"] = requestParameters["withZeroPrice"];
    }

    if (requestParameters["withPricesOnly"] != null) {
      queryParameters["with_prices_only"] = requestParameters["withPricesOnly"];
    }

    if (requestParameters["limit"] != null) {
      queryParameters["limit"] = requestParameters["limit"];
    }

    if (requestParameters["offset"] != null) {
      queryParameters["offset"] = requestParameters["offset"];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["X-Schematic-Api-Key"] = await this.configuration.apiKey(
        "X-Schematic-Api-Key",
      ); // ApiKeyAuth authentication
    }

    const response = await this.request(
      {
        path: `/billing/products`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      ListBillingProductsResponseFromJSON(jsonValue),
    );
  }

  /**
   * List billing products
   */
  async listBillingProducts(
    requestParameters: ListBillingProductsRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<ListBillingProductsResponse> {
    const response = await this.listBillingProductsRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * List customers
   */
  async listCustomersRaw(
    requestParameters: ListCustomersRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<ListCustomersResponse>> {
    const queryParameters: any = {};

    if (requestParameters["name"] != null) {
      queryParameters["name"] = requestParameters["name"];
    }

    if (requestParameters["failedToImport"] != null) {
      queryParameters["failed_to_import"] = requestParameters["failedToImport"];
    }

    if (requestParameters["q"] != null) {
      queryParameters["q"] = requestParameters["q"];
    }

    if (requestParameters["limit"] != null) {
      queryParameters["limit"] = requestParameters["limit"];
    }

    if (requestParameters["offset"] != null) {
      queryParameters["offset"] = requestParameters["offset"];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["X-Schematic-Api-Key"] = await this.configuration.apiKey(
        "X-Schematic-Api-Key",
      ); // ApiKeyAuth authentication
    }

    const response = await this.request(
      {
        path: `/billing/customers`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      ListCustomersResponseFromJSON(jsonValue),
    );
  }

  /**
   * List customers
   */
  async listCustomers(
    requestParameters: ListCustomersRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<ListCustomersResponse> {
    const response = await this.listCustomersRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * List invoices
   */
  async listInvoicesRaw(
    requestParameters: ListInvoicesRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<ListInvoicesResponse>> {
    if (requestParameters["customerExternalId"] == null) {
      throw new runtime.RequiredError(
        "customerExternalId",
        'Required parameter "customerExternalId" was null or undefined when calling listInvoices().',
      );
    }

    const queryParameters: any = {};

    if (requestParameters["companyId"] != null) {
      queryParameters["company_id"] = requestParameters["companyId"];
    }

    if (requestParameters["customerExternalId"] != null) {
      queryParameters["customer_external_id"] =
        requestParameters["customerExternalId"];
    }

    if (requestParameters["subscriptionExternalId"] != null) {
      queryParameters["subscription_external_id"] =
        requestParameters["subscriptionExternalId"];
    }

    if (requestParameters["limit"] != null) {
      queryParameters["limit"] = requestParameters["limit"];
    }

    if (requestParameters["offset"] != null) {
      queryParameters["offset"] = requestParameters["offset"];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["X-Schematic-Api-Key"] = await this.configuration.apiKey(
        "X-Schematic-Api-Key",
      ); // ApiKeyAuth authentication
    }

    const response = await this.request(
      {
        path: `/billing/invoices`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      ListInvoicesResponseFromJSON(jsonValue),
    );
  }

  /**
   * List invoices
   */
  async listInvoices(
    requestParameters: ListInvoicesRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<ListInvoicesResponse> {
    const response = await this.listInvoicesRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * List meters
   */
  async listMetersRaw(
    requestParameters: ListMetersRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<ListMetersResponse>> {
    const queryParameters: any = {};

    if (requestParameters["displayName"] != null) {
      queryParameters["display_name"] = requestParameters["displayName"];
    }

    if (requestParameters["limit"] != null) {
      queryParameters["limit"] = requestParameters["limit"];
    }

    if (requestParameters["offset"] != null) {
      queryParameters["offset"] = requestParameters["offset"];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["X-Schematic-Api-Key"] = await this.configuration.apiKey(
        "X-Schematic-Api-Key",
      ); // ApiKeyAuth authentication
    }

    const response = await this.request(
      {
        path: `/billing/meter`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      ListMetersResponseFromJSON(jsonValue),
    );
  }

  /**
   * List meters
   */
  async listMeters(
    requestParameters: ListMetersRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<ListMetersResponse> {
    const response = await this.listMetersRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * List payment methods
   */
  async listPaymentMethodsRaw(
    requestParameters: ListPaymentMethodsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<ListPaymentMethodsResponse>> {
    if (requestParameters["customerExternalId"] == null) {
      throw new runtime.RequiredError(
        "customerExternalId",
        'Required parameter "customerExternalId" was null or undefined when calling listPaymentMethods().',
      );
    }

    const queryParameters: any = {};

    if (requestParameters["companyId"] != null) {
      queryParameters["company_id"] = requestParameters["companyId"];
    }

    if (requestParameters["customerExternalId"] != null) {
      queryParameters["customer_external_id"] =
        requestParameters["customerExternalId"];
    }

    if (requestParameters["subscriptionExternalId"] != null) {
      queryParameters["subscription_external_id"] =
        requestParameters["subscriptionExternalId"];
    }

    if (requestParameters["limit"] != null) {
      queryParameters["limit"] = requestParameters["limit"];
    }

    if (requestParameters["offset"] != null) {
      queryParameters["offset"] = requestParameters["offset"];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["X-Schematic-Api-Key"] = await this.configuration.apiKey(
        "X-Schematic-Api-Key",
      ); // ApiKeyAuth authentication
    }

    const response = await this.request(
      {
        path: `/billing/payment-methods`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      ListPaymentMethodsResponseFromJSON(jsonValue),
    );
  }

  /**
   * List payment methods
   */
  async listPaymentMethods(
    requestParameters: ListPaymentMethodsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<ListPaymentMethodsResponse> {
    const response = await this.listPaymentMethodsRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * List product prices
   */
  async listProductPricesRaw(
    requestParameters: ListProductPricesRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<ListProductPricesResponse>> {
    const queryParameters: any = {};

    if (requestParameters["ids"] != null) {
      queryParameters["ids"] = requestParameters["ids"];
    }

    if (requestParameters["name"] != null) {
      queryParameters["name"] = requestParameters["name"];
    }

    if (requestParameters["q"] != null) {
      queryParameters["q"] = requestParameters["q"];
    }

    if (requestParameters["priceUsageType"] != null) {
      queryParameters["price_usage_type"] = requestParameters["priceUsageType"];
    }

    if (requestParameters["withoutLinkedToPlan"] != null) {
      queryParameters["without_linked_to_plan"] =
        requestParameters["withoutLinkedToPlan"];
    }

    if (requestParameters["withZeroPrice"] != null) {
      queryParameters["with_zero_price"] = requestParameters["withZeroPrice"];
    }

    if (requestParameters["withPricesOnly"] != null) {
      queryParameters["with_prices_only"] = requestParameters["withPricesOnly"];
    }

    if (requestParameters["limit"] != null) {
      queryParameters["limit"] = requestParameters["limit"];
    }

    if (requestParameters["offset"] != null) {
      queryParameters["offset"] = requestParameters["offset"];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["X-Schematic-Api-Key"] = await this.configuration.apiKey(
        "X-Schematic-Api-Key",
      ); // ApiKeyAuth authentication
    }

    const response = await this.request(
      {
        path: `/billing/product/prices`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      ListProductPricesResponseFromJSON(jsonValue),
    );
  }

  /**
   * List product prices
   */
  async listProductPrices(
    requestParameters: ListProductPricesRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<ListProductPricesResponse> {
    const response = await this.listProductPricesRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Search billing prices
   */
  async searchBillingPricesRaw(
    requestParameters: SearchBillingPricesRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<SearchBillingPricesResponse>> {
    const queryParameters: any = {};

    if (requestParameters["ids"] != null) {
      queryParameters["ids"] = requestParameters["ids"];
    }

    if (requestParameters["interval"] != null) {
      queryParameters["interval"] = requestParameters["interval"];
    }

    if (requestParameters["usageType"] != null) {
      queryParameters["usage_type"] = requestParameters["usageType"];
    }

    if (requestParameters["price"] != null) {
      queryParameters["price"] = requestParameters["price"];
    }

    if (requestParameters["limit"] != null) {
      queryParameters["limit"] = requestParameters["limit"];
    }

    if (requestParameters["offset"] != null) {
      queryParameters["offset"] = requestParameters["offset"];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["X-Schematic-Api-Key"] = await this.configuration.apiKey(
        "X-Schematic-Api-Key",
      ); // ApiKeyAuth authentication
    }

    const response = await this.request(
      {
        path: `/billing/price`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      SearchBillingPricesResponseFromJSON(jsonValue),
    );
  }

  /**
   * Search billing prices
   */
  async searchBillingPrices(
    requestParameters: SearchBillingPricesRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<SearchBillingPricesResponse> {
    const response = await this.searchBillingPricesRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Upsert billing customer
   */
  async upsertBillingCustomerRaw(
    requestParameters: UpsertBillingCustomerRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<UpsertBillingCustomerResponse>> {
    if (requestParameters["createBillingCustomerRequestBody"] == null) {
      throw new runtime.RequiredError(
        "createBillingCustomerRequestBody",
        'Required parameter "createBillingCustomerRequestBody" was null or undefined when calling upsertBillingCustomer().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["X-Schematic-Api-Key"] = await this.configuration.apiKey(
        "X-Schematic-Api-Key",
      ); // ApiKeyAuth authentication
    }

    const response = await this.request(
      {
        path: `/billing/customer/upsert`,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: CreateBillingCustomerRequestBodyToJSON(
          requestParameters["createBillingCustomerRequestBody"],
        ),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      UpsertBillingCustomerResponseFromJSON(jsonValue),
    );
  }

  /**
   * Upsert billing customer
   */
  async upsertBillingCustomer(
    requestParameters: UpsertBillingCustomerRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<UpsertBillingCustomerResponse> {
    const response = await this.upsertBillingCustomerRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Upsert billing meter
   */
  async upsertBillingMeterRaw(
    requestParameters: UpsertBillingMeterRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<UpsertBillingMeterResponse>> {
    if (requestParameters["createMeterRequestBody"] == null) {
      throw new runtime.RequiredError(
        "createMeterRequestBody",
        'Required parameter "createMeterRequestBody" was null or undefined when calling upsertBillingMeter().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["X-Schematic-Api-Key"] = await this.configuration.apiKey(
        "X-Schematic-Api-Key",
      ); // ApiKeyAuth authentication
    }

    const response = await this.request(
      {
        path: `/billing/meter/upsert`,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: CreateMeterRequestBodyToJSON(
          requestParameters["createMeterRequestBody"],
        ),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      UpsertBillingMeterResponseFromJSON(jsonValue),
    );
  }

  /**
   * Upsert billing meter
   */
  async upsertBillingMeter(
    requestParameters: UpsertBillingMeterRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<UpsertBillingMeterResponse> {
    const response = await this.upsertBillingMeterRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Upsert billing price
   */
  async upsertBillingPriceRaw(
    requestParameters: UpsertBillingPriceRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<UpsertBillingPriceResponse>> {
    if (requestParameters["createBillingPriceRequestBody"] == null) {
      throw new runtime.RequiredError(
        "createBillingPriceRequestBody",
        'Required parameter "createBillingPriceRequestBody" was null or undefined when calling upsertBillingPrice().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["X-Schematic-Api-Key"] = await this.configuration.apiKey(
        "X-Schematic-Api-Key",
      ); // ApiKeyAuth authentication
    }

    const response = await this.request(
      {
        path: `/billing/price/upsert`,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: CreateBillingPriceRequestBodyToJSON(
          requestParameters["createBillingPriceRequestBody"],
        ),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      UpsertBillingPriceResponseFromJSON(jsonValue),
    );
  }

  /**
   * Upsert billing price
   */
  async upsertBillingPrice(
    requestParameters: UpsertBillingPriceRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<UpsertBillingPriceResponse> {
    const response = await this.upsertBillingPriceRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Upsert billing product
   */
  async upsertBillingProductRaw(
    requestParameters: UpsertBillingProductRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<UpsertBillingProductResponse>> {
    if (requestParameters["createBillingProductRequestBody"] == null) {
      throw new runtime.RequiredError(
        "createBillingProductRequestBody",
        'Required parameter "createBillingProductRequestBody" was null or undefined when calling upsertBillingProduct().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["X-Schematic-Api-Key"] = await this.configuration.apiKey(
        "X-Schematic-Api-Key",
      ); // ApiKeyAuth authentication
    }

    const response = await this.request(
      {
        path: `/billing/product/upsert`,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: CreateBillingProductRequestBodyToJSON(
          requestParameters["createBillingProductRequestBody"],
        ),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      UpsertBillingProductResponseFromJSON(jsonValue),
    );
  }

  /**
   * Upsert billing product
   */
  async upsertBillingProduct(
    requestParameters: UpsertBillingProductRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<UpsertBillingProductResponse> {
    const response = await this.upsertBillingProductRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Upsert billing subscription
   */
  async upsertBillingSubscriptionRaw(
    requestParameters: UpsertBillingSubscriptionRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<UpsertBillingSubscriptionResponse>> {
    if (requestParameters["createBillingSubscriptionsRequestBody"] == null) {
      throw new runtime.RequiredError(
        "createBillingSubscriptionsRequestBody",
        'Required parameter "createBillingSubscriptionsRequestBody" was null or undefined when calling upsertBillingSubscription().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["X-Schematic-Api-Key"] = await this.configuration.apiKey(
        "X-Schematic-Api-Key",
      ); // ApiKeyAuth authentication
    }

    const response = await this.request(
      {
        path: `/billing/subscription/upsert`,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: CreateBillingSubscriptionsRequestBodyToJSON(
          requestParameters["createBillingSubscriptionsRequestBody"],
        ),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      UpsertBillingSubscriptionResponseFromJSON(jsonValue),
    );
  }

  /**
   * Upsert billing subscription
   */
  async upsertBillingSubscription(
    requestParameters: UpsertBillingSubscriptionRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<UpsertBillingSubscriptionResponse> {
    const response = await this.upsertBillingSubscriptionRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Upsert invoice
   */
  async upsertInvoiceRaw(
    requestParameters: UpsertInvoiceRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<UpsertInvoiceResponse>> {
    if (requestParameters["createInvoiceRequestBody"] == null) {
      throw new runtime.RequiredError(
        "createInvoiceRequestBody",
        'Required parameter "createInvoiceRequestBody" was null or undefined when calling upsertInvoice().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["X-Schematic-Api-Key"] = await this.configuration.apiKey(
        "X-Schematic-Api-Key",
      ); // ApiKeyAuth authentication
    }

    const response = await this.request(
      {
        path: `/billing/invoices`,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: CreateInvoiceRequestBodyToJSON(
          requestParameters["createInvoiceRequestBody"],
        ),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      UpsertInvoiceResponseFromJSON(jsonValue),
    );
  }

  /**
   * Upsert invoice
   */
  async upsertInvoice(
    requestParameters: UpsertInvoiceRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<UpsertInvoiceResponse> {
    const response = await this.upsertInvoiceRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Upsert payment method
   */
  async upsertPaymentMethodRaw(
    requestParameters: UpsertPaymentMethodRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<UpsertPaymentMethodResponse>> {
    if (requestParameters["createPaymentMethodRequestBody"] == null) {
      throw new runtime.RequiredError(
        "createPaymentMethodRequestBody",
        'Required parameter "createPaymentMethodRequestBody" was null or undefined when calling upsertPaymentMethod().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["X-Schematic-Api-Key"] = await this.configuration.apiKey(
        "X-Schematic-Api-Key",
      ); // ApiKeyAuth authentication
    }

    const response = await this.request(
      {
        path: `/billing/payment-methods`,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: CreatePaymentMethodRequestBodyToJSON(
          requestParameters["createPaymentMethodRequestBody"],
        ),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      UpsertPaymentMethodResponseFromJSON(jsonValue),
    );
  }

  /**
   * Upsert payment method
   */
  async upsertPaymentMethod(
    requestParameters: UpsertPaymentMethodRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<UpsertPaymentMethodResponse> {
    const response = await this.upsertPaymentMethodRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }
}
