/* tslint:disable */
/* eslint-disable */
/**
 * Schematic API
 * Schematic API
 *
 * The version of the OpenAPI document: 0.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from "../runtime";
import type { PlanDetailResponseData } from "./PlanDetailResponseData";
import {
  PlanDetailResponseDataFromJSON,
  PlanDetailResponseDataFromJSONTyped,
  PlanDetailResponseDataToJSON,
} from "./PlanDetailResponseData";
import type { BillingCreditBundleView } from "./BillingCreditBundleView";
import {
  BillingCreditBundleViewFromJSON,
  BillingCreditBundleViewFromJSONTyped,
  BillingCreditBundleViewToJSON,
} from "./BillingCreditBundleView";
import type { StripeEmbedInfo } from "./StripeEmbedInfo";
import {
  StripeEmbedInfoFromJSON,
  StripeEmbedInfoFromJSONTyped,
  StripeEmbedInfoToJSON,
} from "./StripeEmbedInfo";
import type { InvoiceResponseData } from "./InvoiceResponseData";
import {
  InvoiceResponseDataFromJSON,
  InvoiceResponseDataFromJSONTyped,
  InvoiceResponseDataToJSON,
} from "./InvoiceResponseData";
import type { CreditCompanyGrantView } from "./CreditCompanyGrantView";
import {
  CreditCompanyGrantViewFromJSON,
  CreditCompanyGrantViewFromJSONTyped,
  CreditCompanyGrantViewToJSON,
} from "./CreditCompanyGrantView";
import type { CompanyPlanDetailResponseData } from "./CompanyPlanDetailResponseData";
import {
  CompanyPlanDetailResponseDataFromJSON,
  CompanyPlanDetailResponseDataFromJSONTyped,
  CompanyPlanDetailResponseDataToJSON,
} from "./CompanyPlanDetailResponseData";
import type { UsageBasedEntitlementResponseData } from "./UsageBasedEntitlementResponseData";
import {
  UsageBasedEntitlementResponseDataFromJSON,
  UsageBasedEntitlementResponseDataFromJSONTyped,
  UsageBasedEntitlementResponseDataToJSON,
} from "./UsageBasedEntitlementResponseData";
import type { CompatiblePlans } from "./CompatiblePlans";
import {
  CompatiblePlansFromJSON,
  CompatiblePlansFromJSONTyped,
  CompatiblePlansToJSON,
} from "./CompatiblePlans";
import type { ComponentCapabilities } from "./ComponentCapabilities";
import {
  ComponentCapabilitiesFromJSON,
  ComponentCapabilitiesFromJSONTyped,
  ComponentCapabilitiesToJSON,
} from "./ComponentCapabilities";
import type { ComponentResponseData } from "./ComponentResponseData";
import {
  ComponentResponseDataFromJSON,
  ComponentResponseDataFromJSONTyped,
  ComponentResponseDataToJSON,
} from "./ComponentResponseData";
import type { FeatureUsageDetailResponseData } from "./FeatureUsageDetailResponseData";
import {
  FeatureUsageDetailResponseDataFromJSON,
  FeatureUsageDetailResponseDataFromJSONTyped,
  FeatureUsageDetailResponseDataToJSON,
} from "./FeatureUsageDetailResponseData";
import type { CompanyDetailResponseData } from "./CompanyDetailResponseData";
import {
  CompanyDetailResponseDataFromJSON,
  CompanyDetailResponseDataFromJSONTyped,
  CompanyDetailResponseDataToJSON,
} from "./CompanyDetailResponseData";
import type { CompanySubscriptionResponseData } from "./CompanySubscriptionResponseData";
import {
  CompanySubscriptionResponseDataFromJSON,
  CompanySubscriptionResponseDataFromJSONTyped,
  CompanySubscriptionResponseDataToJSON,
} from "./CompanySubscriptionResponseData";

/**
 * The returned resource
 * @export
 * @interface ComponentHydrateResponseData
 */
export interface ComponentHydrateResponseData {
  /**
   *
   * @type {Array<CompanyPlanDetailResponseData>}
   * @memberof ComponentHydrateResponseData
   */
  activeAddOns: Array<CompanyPlanDetailResponseData>;
  /**
   *
   * @type {Array<CompanyPlanDetailResponseData>}
   * @memberof ComponentHydrateResponseData
   */
  activePlans: Array<CompanyPlanDetailResponseData>;
  /**
   *
   * @type {Array<UsageBasedEntitlementResponseData>}
   * @memberof ComponentHydrateResponseData
   */
  activeUsageBasedEntitlements: Array<UsageBasedEntitlementResponseData>;
  /**
   *
   * @type {Array<CompatiblePlans>}
   * @memberof ComponentHydrateResponseData
   */
  addOnCompatibilities: Array<CompatiblePlans>;
  /**
   *
   * @type {ComponentCapabilities}
   * @memberof ComponentHydrateResponseData
   */
  capabilities?: ComponentCapabilities;
  /**
   *
   * @type {CompanyDetailResponseData}
   * @memberof ComponentHydrateResponseData
   */
  company?: CompanyDetailResponseData;
  /**
   *
   * @type {ComponentResponseData}
   * @memberof ComponentHydrateResponseData
   */
  component?: ComponentResponseData;
  /**
   *
   * @type {Array<BillingCreditBundleView>}
   * @memberof ComponentHydrateResponseData
   */
  creditBundles: Array<BillingCreditBundleView>;
  /**
   *
   * @type {Array<CreditCompanyGrantView>}
   * @memberof ComponentHydrateResponseData
   */
  creditGrants: Array<CreditCompanyGrantView>;
  /**
   *
   * @type {PlanDetailResponseData}
   * @memberof ComponentHydrateResponseData
   */
  defaultPlan?: PlanDetailResponseData;
  /**
   *
   * @type {FeatureUsageDetailResponseData}
   * @memberof ComponentHydrateResponseData
   */
  featureUsage?: FeatureUsageDetailResponseData;
  /**
   *
   * @type {boolean}
   * @memberof ComponentHydrateResponseData
   */
  showPeriodToggle: boolean;
  /**
   *
   * @type {StripeEmbedInfo}
   * @memberof ComponentHydrateResponseData
   */
  stripeEmbed?: StripeEmbedInfo;
  /**
   *
   * @type {CompanySubscriptionResponseData}
   * @memberof ComponentHydrateResponseData
   */
  subscription?: CompanySubscriptionResponseData;
  /**
   *
   * @type {boolean}
   * @memberof ComponentHydrateResponseData
   */
  trialPaymentMethodRequired?: boolean | null;
  /**
   *
   * @type {InvoiceResponseData}
   * @memberof ComponentHydrateResponseData
   */
  upcomingInvoice?: InvoiceResponseData;
}

/**
 * Check if a given object implements the ComponentHydrateResponseData interface.
 */
export function instanceOfComponentHydrateResponseData(
  value: object,
): value is ComponentHydrateResponseData {
  if (!("activeAddOns" in value) || value["activeAddOns"] === undefined)
    return false;
  if (!("activePlans" in value) || value["activePlans"] === undefined)
    return false;
  if (
    !("activeUsageBasedEntitlements" in value) ||
    value["activeUsageBasedEntitlements"] === undefined
  )
    return false;
  if (
    !("addOnCompatibilities" in value) ||
    value["addOnCompatibilities"] === undefined
  )
    return false;
  if (!("creditBundles" in value) || value["creditBundles"] === undefined)
    return false;
  if (!("creditGrants" in value) || value["creditGrants"] === undefined)
    return false;
  if (!("showPeriodToggle" in value) || value["showPeriodToggle"] === undefined)
    return false;
  return true;
}

export function ComponentHydrateResponseDataFromJSON(
  json: any,
): ComponentHydrateResponseData {
  return ComponentHydrateResponseDataFromJSONTyped(json, false);
}

export function ComponentHydrateResponseDataFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean,
): ComponentHydrateResponseData {
  if (json == null) {
    return json;
  }
  return {
    activeAddOns: (json["active_add_ons"] as Array<any>).map(
      CompanyPlanDetailResponseDataFromJSON,
    ),
    activePlans: (json["active_plans"] as Array<any>).map(
      CompanyPlanDetailResponseDataFromJSON,
    ),
    activeUsageBasedEntitlements: (
      json["active_usage_based_entitlements"] as Array<any>
    ).map(UsageBasedEntitlementResponseDataFromJSON),
    addOnCompatibilities: (json["add_on_compatibilities"] as Array<any>).map(
      CompatiblePlansFromJSON,
    ),
    capabilities:
      json["capabilities"] == null
        ? undefined
        : ComponentCapabilitiesFromJSON(json["capabilities"]),
    company:
      json["company"] == null
        ? undefined
        : CompanyDetailResponseDataFromJSON(json["company"]),
    component:
      json["component"] == null
        ? undefined
        : ComponentResponseDataFromJSON(json["component"]),
    creditBundles: (json["credit_bundles"] as Array<any>).map(
      BillingCreditBundleViewFromJSON,
    ),
    creditGrants: (json["credit_grants"] as Array<any>).map(
      CreditCompanyGrantViewFromJSON,
    ),
    defaultPlan:
      json["default_plan"] == null
        ? undefined
        : PlanDetailResponseDataFromJSON(json["default_plan"]),
    featureUsage:
      json["feature_usage"] == null
        ? undefined
        : FeatureUsageDetailResponseDataFromJSON(json["feature_usage"]),
    showPeriodToggle: json["show_period_toggle"],
    stripeEmbed:
      json["stripe_embed"] == null
        ? undefined
        : StripeEmbedInfoFromJSON(json["stripe_embed"]),
    subscription:
      json["subscription"] == null
        ? undefined
        : CompanySubscriptionResponseDataFromJSON(json["subscription"]),
    trialPaymentMethodRequired:
      json["trial_payment_method_required"] == null
        ? undefined
        : json["trial_payment_method_required"],
    upcomingInvoice:
      json["upcoming_invoice"] == null
        ? undefined
        : InvoiceResponseDataFromJSON(json["upcoming_invoice"]),
  };
}

export function ComponentHydrateResponseDataToJSON(
  value?: ComponentHydrateResponseData | null,
): any {
  if (value == null) {
    return value;
  }
  return {
    active_add_ons: (value["activeAddOns"] as Array<any>).map(
      CompanyPlanDetailResponseDataToJSON,
    ),
    active_plans: (value["activePlans"] as Array<any>).map(
      CompanyPlanDetailResponseDataToJSON,
    ),
    active_usage_based_entitlements: (
      value["activeUsageBasedEntitlements"] as Array<any>
    ).map(UsageBasedEntitlementResponseDataToJSON),
    add_on_compatibilities: (value["addOnCompatibilities"] as Array<any>).map(
      CompatiblePlansToJSON,
    ),
    capabilities: ComponentCapabilitiesToJSON(value["capabilities"]),
    company: CompanyDetailResponseDataToJSON(value["company"]),
    component: ComponentResponseDataToJSON(value["component"]),
    credit_bundles: (value["creditBundles"] as Array<any>).map(
      BillingCreditBundleViewToJSON,
    ),
    credit_grants: (value["creditGrants"] as Array<any>).map(
      CreditCompanyGrantViewToJSON,
    ),
    default_plan: PlanDetailResponseDataToJSON(value["defaultPlan"]),
    feature_usage: FeatureUsageDetailResponseDataToJSON(value["featureUsage"]),
    show_period_toggle: value["showPeriodToggle"],
    stripe_embed: StripeEmbedInfoToJSON(value["stripeEmbed"]),
    subscription: CompanySubscriptionResponseDataToJSON(value["subscription"]),
    trial_payment_method_required: value["trialPaymentMethodRequired"],
    upcoming_invoice: InvoiceResponseDataToJSON(value["upcomingInvoice"]),
  };
}
