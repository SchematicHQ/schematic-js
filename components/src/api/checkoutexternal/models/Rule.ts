/* tslint:disable */
/* eslint-disable */
/**
 * Schematic API
 * Schematic API
 *
 * The version of the OpenAPI document: 0.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from "../runtime";
import type { Condition } from "./Condition";
import {
  ConditionFromJSON,
  ConditionFromJSONTyped,
  ConditionToJSON,
} from "./Condition";
import type { ConditionGroup } from "./ConditionGroup";
import {
  ConditionGroupFromJSON,
  ConditionGroupFromJSONTyped,
  ConditionGroupToJSON,
} from "./ConditionGroup";

/**
 *
 * @export
 * @interface Rule
 */
export interface Rule {
  /**
   *
   * @type {string}
   * @memberof Rule
   */
  accountId: string;
  /**
   *
   * @type {Array<ConditionGroup>}
   * @memberof Rule
   */
  conditionGroups: Array<ConditionGroup>;
  /**
   *
   * @type {Array<Condition>}
   * @memberof Rule
   */
  conditions: Array<Condition>;
  /**
   *
   * @type {string}
   * @memberof Rule
   */
  environmentId: string;
  /**
   *
   * @type {string}
   * @memberof Rule
   */
  flagId?: string | null;
  /**
   *
   * @type {string}
   * @memberof Rule
   */
  id: string;
  /**
   *
   * @type {string}
   * @memberof Rule
   */
  name: string;
  /**
   *
   * @type {number}
   * @memberof Rule
   */
  priority: number;
  /**
   *
   * @type {string}
   * @memberof Rule
   */
  ruleType: string;
  /**
   *
   * @type {boolean}
   * @memberof Rule
   */
  value: boolean;
}

/**
 * Check if a given object implements the Rule interface.
 */
export function instanceOfRule(value: object): value is Rule {
  if (!("accountId" in value) || value["accountId"] === undefined) return false;
  if (!("conditionGroups" in value) || value["conditionGroups"] === undefined)
    return false;
  if (!("conditions" in value) || value["conditions"] === undefined)
    return false;
  if (!("environmentId" in value) || value["environmentId"] === undefined)
    return false;
  if (!("id" in value) || value["id"] === undefined) return false;
  if (!("name" in value) || value["name"] === undefined) return false;
  if (!("priority" in value) || value["priority"] === undefined) return false;
  if (!("ruleType" in value) || value["ruleType"] === undefined) return false;
  if (!("value" in value) || value["value"] === undefined) return false;
  return true;
}

export function RuleFromJSON(json: any): Rule {
  return RuleFromJSONTyped(json, false);
}

export function RuleFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean,
): Rule {
  if (json == null) {
    return json;
  }
  return {
    accountId: json["account_id"],
    conditionGroups: (json["condition_groups"] as Array<any>).map(
      ConditionGroupFromJSON,
    ),
    conditions: (json["conditions"] as Array<any>).map(ConditionFromJSON),
    environmentId: json["environment_id"],
    flagId: json["flag_id"] == null ? undefined : json["flag_id"],
    id: json["id"],
    name: json["name"],
    priority: json["priority"],
    ruleType: json["rule_type"],
    value: json["value"],
  };
}

export function RuleToJSON(value?: Rule | null): any {
  if (value == null) {
    return value;
  }
  return {
    account_id: value["accountId"],
    condition_groups: (value["conditionGroups"] as Array<any>).map(
      ConditionGroupToJSON,
    ),
    conditions: (value["conditions"] as Array<any>).map(ConditionToJSON),
    environment_id: value["environmentId"],
    flag_id: value["flagId"],
    id: value["id"],
    name: value["name"],
    priority: value["priority"],
    rule_type: value["ruleType"],
    value: value["value"],
  };
}
