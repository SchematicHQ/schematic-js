/* tslint:disable */
/* eslint-disable */
/**
 * Schematic API
 * Schematic API
 *
 * The version of the OpenAPI document: 0.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from "../runtime";
import type { EntityTraitDefinitionResponseData } from "./EntityTraitDefinitionResponseData";
import {
  EntityTraitDefinitionResponseDataFromJSON,
  EntityTraitDefinitionResponseDataFromJSONTyped,
  EntityTraitDefinitionResponseDataToJSON,
} from "./EntityTraitDefinitionResponseData";
import type { PreviewObject } from "./PreviewObject";
import {
  PreviewObjectFromJSON,
  PreviewObjectFromJSONTyped,
  PreviewObjectToJSON,
} from "./PreviewObject";
import type { EventSummaryResponseData } from "./EventSummaryResponseData";
import {
  EventSummaryResponseDataFromJSON,
  EventSummaryResponseDataFromJSONTyped,
  EventSummaryResponseDataToJSON,
} from "./EventSummaryResponseData";
import type { FlagDetailResponseData } from "./FlagDetailResponseData";
import {
  FlagDetailResponseDataFromJSON,
  FlagDetailResponseDataFromJSONTyped,
  FlagDetailResponseDataToJSON,
} from "./FlagDetailResponseData";

/**
 *
 * @export
 * @interface FeatureDetailResponseData
 */
export interface FeatureDetailResponseData {
  /**
   *
   * @type {Date}
   * @memberof FeatureDetailResponseData
   */
  createdAt: Date;
  /**
   *
   * @type {string}
   * @memberof FeatureDetailResponseData
   */
  description: string;
  /**
   *
   * @type {string}
   * @memberof FeatureDetailResponseData
   */
  eventSubtype?: string | null;
  /**
   *
   * @type {EventSummaryResponseData}
   * @memberof FeatureDetailResponseData
   */
  eventSummary?: EventSummaryResponseData;
  /**
   *
   * @type {string}
   * @memberof FeatureDetailResponseData
   */
  featureType: string;
  /**
   *
   * @type {Array<FlagDetailResponseData>}
   * @memberof FeatureDetailResponseData
   */
  flags: Array<FlagDetailResponseData>;
  /**
   *
   * @type {string}
   * @memberof FeatureDetailResponseData
   */
  icon: string;
  /**
   *
   * @type {string}
   * @memberof FeatureDetailResponseData
   */
  id: string;
  /**
   *
   * @type {string}
   * @memberof FeatureDetailResponseData
   */
  lifecyclePhase?: string | null;
  /**
   *
   * @type {string}
   * @memberof FeatureDetailResponseData
   */
  maintainerId?: string | null;
  /**
   *
   * @type {string}
   * @memberof FeatureDetailResponseData
   */
  name: string;
  /**
   *
   * @type {Array<PreviewObject>}
   * @memberof FeatureDetailResponseData
   */
  plans: Array<PreviewObject>;
  /**
   *
   * @type {string}
   * @memberof FeatureDetailResponseData
   */
  pluralName?: string | null;
  /**
   *
   * @type {string}
   * @memberof FeatureDetailResponseData
   */
  singularName?: string | null;
  /**
   *
   * @type {EntityTraitDefinitionResponseData}
   * @memberof FeatureDetailResponseData
   */
  trait?: EntityTraitDefinitionResponseData;
  /**
   *
   * @type {string}
   * @memberof FeatureDetailResponseData
   */
  traitId?: string | null;
  /**
   *
   * @type {Date}
   * @memberof FeatureDetailResponseData
   */
  updatedAt: Date;
}

/**
 * Check if a given object implements the FeatureDetailResponseData interface.
 */
export function instanceOfFeatureDetailResponseData(
  value: object,
): value is FeatureDetailResponseData {
  if (!("createdAt" in value) || value["createdAt"] === undefined) return false;
  if (!("description" in value) || value["description"] === undefined)
    return false;
  if (!("featureType" in value) || value["featureType"] === undefined)
    return false;
  if (!("flags" in value) || value["flags"] === undefined) return false;
  if (!("icon" in value) || value["icon"] === undefined) return false;
  if (!("id" in value) || value["id"] === undefined) return false;
  if (!("name" in value) || value["name"] === undefined) return false;
  if (!("plans" in value) || value["plans"] === undefined) return false;
  if (!("updatedAt" in value) || value["updatedAt"] === undefined) return false;
  return true;
}

export function FeatureDetailResponseDataFromJSON(
  json: any,
): FeatureDetailResponseData {
  return FeatureDetailResponseDataFromJSONTyped(json, false);
}

export function FeatureDetailResponseDataFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean,
): FeatureDetailResponseData {
  if (json == null) {
    return json;
  }
  return {
    createdAt: new Date(json["created_at"]),
    description: json["description"],
    eventSubtype:
      json["event_subtype"] == null ? undefined : json["event_subtype"],
    eventSummary:
      json["event_summary"] == null
        ? undefined
        : EventSummaryResponseDataFromJSON(json["event_summary"]),
    featureType: json["feature_type"],
    flags: (json["flags"] as Array<any>).map(FlagDetailResponseDataFromJSON),
    icon: json["icon"],
    id: json["id"],
    lifecyclePhase:
      json["lifecycle_phase"] == null ? undefined : json["lifecycle_phase"],
    maintainerId:
      json["maintainer_id"] == null ? undefined : json["maintainer_id"],
    name: json["name"],
    plans: (json["plans"] as Array<any>).map(PreviewObjectFromJSON),
    pluralName: json["plural_name"] == null ? undefined : json["plural_name"],
    singularName:
      json["singular_name"] == null ? undefined : json["singular_name"],
    trait:
      json["trait"] == null
        ? undefined
        : EntityTraitDefinitionResponseDataFromJSON(json["trait"]),
    traitId: json["trait_id"] == null ? undefined : json["trait_id"],
    updatedAt: new Date(json["updated_at"]),
  };
}

export function FeatureDetailResponseDataToJSON(
  value?: FeatureDetailResponseData | null,
): any {
  if (value == null) {
    return value;
  }
  return {
    created_at: value["createdAt"].toISOString(),
    description: value["description"],
    event_subtype: value["eventSubtype"],
    event_summary: EventSummaryResponseDataToJSON(value["eventSummary"]),
    feature_type: value["featureType"],
    flags: (value["flags"] as Array<any>).map(FlagDetailResponseDataToJSON),
    icon: value["icon"],
    id: value["id"],
    lifecycle_phase: value["lifecyclePhase"],
    maintainer_id: value["maintainerId"],
    name: value["name"],
    plans: (value["plans"] as Array<any>).map(PreviewObjectToJSON),
    plural_name: value["pluralName"],
    singular_name: value["singularName"],
    trait: EntityTraitDefinitionResponseDataToJSON(value["trait"]),
    trait_id: value["traitId"],
    updated_at: value["updatedAt"].toISOString(),
  };
}
