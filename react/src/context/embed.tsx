import {
  createContext,
  useCallback,
  useEffect,
  useMemo,
  useRef,
  useState,
} from "react";
import { inflate } from "pako";
import { createGlobalStyle, ThemeProvider } from "styled-components";
import merge from "lodash.merge";
import { loadStripe, type Stripe } from "@stripe/stripe-js";
import { Elements } from "@stripe/react-stripe-js";
import {
  CheckoutApi,
  Configuration,
  type ConfigurationParameters,
  type ComponentHydrateResponseData,
} from "../api";
import type {
  RecursivePartial,
  SerializedEditorState,
  SerializedNodeWithChildren,
} from "../types";
import { hexToHSL } from "../utils";

const GlobalStyle = createGlobalStyle`
  @font-face {
    font-family: "icons";
    src: url(data:font/ttf;base64,)
      format("truetype");
  }

  i[class^="i-"]:before,
  i[class*=" i-"]:before {
    font-family: icons !important;
    font-style: normal;
    font-weight: normal !important;
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
  }

  .i-alarm:before {
    content: "\\f101";
  }
  .i-arrow-curved:before {
    content: "\\f102";
  }
  .i-arrow-down:before {
    content: "\\f103";
  }
  .i-arrow-left:before {
    content: "\\f104";
  }
  .i-arrow-right:before {
    content: "\\f105";
  }
  .i-arrow-up:before {
    content: "\\f106";
  }
  .i-arrow-upward:before {
    content: "\\f107";
  }
  .i-backspace:before {
    content: "\\f108";
  }
  .i-bell:before {
    content: "\\f109";
  }
  .i-board:before {
    content: "\\f10a";
  }
  .i-bookmark:before {
    content: "\\f10b";
  }
  .i-boolean-on:before {
    content: "\\f10c";
  }
  .i-boolean:before {
    content: "\\f10d";
  }
  .i-bulb:before {
    content: "\\f10e";
  }
  .i-burger:before {
    content: "\\f10f";
  }
  .i-check-rounded:before {
    content: "\\f110";
  }
  .i-check:before {
    content: "\\f111";
  }
  .i-chevron-down:before {
    content: "\\f112";
  }
  .i-chevron-left:before {
    content: "\\f113";
  }
  .i-chevron-right:before {
    content: "\\f114";
  }
  .i-chevron-up:before {
    content: "\\f115";
  }
  .i-chip:before {
    content: "\\f116";
  }
  .i-chips:before {
    content: "\\f117";
  }
  .i-close-rounded-filled:before {
    content: "\\f118";
  }
  .i-close:before {
    content: "\\f119";
  }
  .i-cloud-up:before {
    content: "\\f11a";
  }
  .i-club:before {
    content: "\\f11b";
  }
  .i-cmd:before {
    content: "\\f11c";
  }
  .i-code:before {
    content: "\\f11d";
  }
  .i-coffee:before {
    content: "\\f11e";
  }
  .i-cog:before {
    content: "\\f11f";
  }
  .i-collapse-empty:before {
    content: "\\f120";
  }
  .i-collapse:before {
    content: "\\f121";
  }
  .i-compass:before {
    content: "\\f122";
  }
  .i-connection:before {
    content: "\\f123";
  }
  .i-copy:before {
    content: "\\f124";
  }
  .i-cylnder:before {
    content: "\\f125";
  }
  .i-diamond:before {
    content: "\\f126";
  }
  .i-dollar-rounded:before {
    content: "\\f127";
  }
  .i-dots-horizontal:before {
    content: "\\f128";
  }
  .i-dots-vertical:before {
    content: "\\f129";
  }
  .i-entitlements:before {
    content: "\\f12a";
  }
  .i-equalizer:before {
    content: "\\f12b";
  }
  .i-exclamation-rounded-filled:before {
    content: "\\f12c";
  }
  .i-eye:before {
    content: "\\f12d";
  }
  .i-filter:before {
    content: "\\f12e";
  }
  .i-folder-minus:before {
    content: "\\f12f";
  }
  .i-folder-plus:before {
    content: "\\f130";
  }
  .i-folder:before {
    content: "\\f131";
  }
  .i-glasses:before {
    content: "\\f132";
  }
  .i-globe:before {
    content: "\\f133";
  }
  .i-hammer:before {
    content: "\\f134";
  }
  .i-hash:before {
    content: "\\f135";
  }
  .i-heart:before {
    content: "\\f136";
  }
  .i-hubspot:before {
    content: "\\f137";
  }
  .i-image:before {
    content: "\\f138";
  }
  .i-info-rounded:before {
    content: "\\f139";
  }
  .i-juice:before {
    content: "\\f13a";
  }
  .i-key:before {
    content: "\\f13b";
  }
  .i-music:before {
    content: "\\f13c";
  }
  .i-node-minus:before {
    content: "\\f13d";
  }
  .i-node-plus:before {
    content: "\\f13e";
  }
  .i-package:before {
    content: "\\f13f";
  }
  .i-paper-plane:before {
    content: "\\f140";
  }
  .i-pencil:before {
    content: "\\f141";
  }
  .i-picker:before {
    content: "\\f142";
  }
  .i-plan:before {
    content: "\\f143";
  }
  .i-plug:before {
    content: "\\f144";
  }
  .i-plus-minus:before {
    content: "\\f145";
  }
  .i-plus-rounded-outline:before {
    content: "\\f146";
  }
  .i-present:before {
    content: "\\f147";
  }
  .i-schematic:before {
    content: "\\f148";
  }
  .i-search:before {
    content: "\\f149";
  }
  .i-segment:before {
    content: "\\f14a";
  }
  .i-server-search:before {
    content: "\\f14b";
  }
  .i-sidebar:before {
    content: "\\f14c";
  }
  .i-signal:before {
    content: "\\f14d";
  }
  .i-silence:before {
    content: "\\f14e";
  }
  .i-spade:before {
    content: "\\f14f";
  }
  .i-speaker:before {
    content: "\\f150";
  }
  .i-stacks:before {
    content: "\\f151";
  }
  .i-stripe:before {
    content: "\\f152";
  }
  .i-text:before {
    content: "\\f153";
  }
  .i-thunder:before {
    content: "\\f154";
  }
  .i-tornado:before {
    content: "\\f155";
  }
  .i-truck:before {
    content: "\\f156";
  }
  .i-tube:before {
    content: "\\f157";
  }
  .i-unprotected:before {
    content: "\\f158";
  }
  .i-verified:before {
    content: "\\f159";
  }
  .i-video-camera:before {
    content: "\\f15a";
  }
  .i-wallet:before {
    content: "\\f15b";
  }
  .i-watch-hand:before {
    content: "\\f15c";
  }
  .i-watch-pocket:before {
    content: "\\f15d";
  }
  .i-water-drop:before {
    content: "\\f15e";
  }
  .i-waves:before {
    content: "\\f15f";
  }
  .i-webhook:before {
    content: "\\f160";
  }
  .i-wind:before {
    content: "\\f161";
  }
`;

export interface TypographySettings {
  fontFamily: string;
  fontSize: number;
  fontWeight: number;
  color: string;
}

export interface EmbedThemeSettings {
  numberOfColumns: 1 | 2 | 3;
  sectionLayout: "merged" | "separate";
  colorMode: "light" | "dark";
  primary: string;
  secondary: string;
  card: {
    background: string;
    borderRadius: number;
    hasShadow: boolean;
    padding: number;
  };
  typography: {
    heading1: TypographySettings;
    heading2: TypographySettings;
    heading3: TypographySettings;
    heading4: TypographySettings;
    heading5: TypographySettings;
    heading6: TypographySettings;
    text: TypographySettings;
    link: TypographySettings;
  };
}

export type FontStyle = keyof EmbedThemeSettings["typography"];

export const defaultTheme: EmbedThemeSettings = {
  numberOfColumns: 2,
  sectionLayout: "merged",
  colorMode: "light",
  primary: "#000000",
  secondary: "#000000",
  card: {
    background: "#FFFFFF",
    borderRadius: 10,
    hasShadow: true,
    padding: 45,
  },
  typography: {
    heading1: {
      fontFamily: "Manrope",
      fontSize: 37,
      fontWeight: 800,
      color: "#000000",
    },
    heading2: {
      fontFamily: "Manrope",
      fontSize: 29,
      fontWeight: 800,
      color: "#000000",
    },
    heading3: {
      fontFamily: "Manrope",
      fontSize: 20,
      fontWeight: 600,
      color: "#000000",
    },
    heading4: {
      fontFamily: "Manrope",
      fontSize: 18,
      fontWeight: 800,
      color: "#000000",
    },
    heading5: {
      fontFamily: "Public Sans",
      fontSize: 17,
      fontWeight: 500,
      color: "#000000",
    },
    heading6: {
      fontFamily: "Public Sans",
      fontSize: 14,
      fontWeight: 400,
      color: "#8A8A8A",
    },
    text: {
      fontFamily: "Public Sans",
      fontSize: 16,
      fontWeight: 400,
      color: "#000000",
    },
    link: {
      fontFamily: "Inter",
      fontSize: 16,
      fontWeight: 400,
      color: "#194BFB",
    },
  },
};

export type EmbedSettings = {
  theme: EmbedThemeSettings;
};

export const defaultSettings: EmbedSettings = {
  theme: defaultTheme,
};

/* eslint-disable-next-line @typescript-eslint/no-explicit-any */
function isEditorState(obj: any): obj is SerializedEditorState {
  return Object.entries(obj).every(([key, value]) => {
    return typeof key === "string" && typeof value === "object";
  });
}

function getEditorState(json: string) {
  const obj = JSON.parse(json);
  return isEditorState(obj) ? obj : undefined;
}

function parseEditorState(data: SerializedEditorState) {
  const initialMap: Record<string, SerializedNodeWithChildren> = {};
  const map = Object.entries(data).reduce((acc, [nodeId, node]) => {
    return { ...acc, [nodeId]: { ...node, id: nodeId, children: [] } };
  }, initialMap);

  const arr: SerializedNodeWithChildren[] = [];
  Object.entries(data).forEach(([nodeId, node]) => {
    const nodeWithChildren = map[nodeId];
    if (node.parent) {
      map[node.parent]?.children.push(nodeWithChildren!);
    } else {
      arr.push(nodeWithChildren!);
    }
  });

  return arr;
}

export type EmbedLayout = "portal" | "checkout" | "payment" | "disabled";

export interface EmbedContextProps {
  api: CheckoutApi | null;
  data: ComponentHydrateResponseData;
  nodes: SerializedNodeWithChildren[];
  settings: EmbedSettings;
  stripe: Promise<Stripe | null> | null;
  layout: EmbedLayout;
  error?: Error;
  isPending: boolean;
  hydrate: () => void;
  setData: (data: RecursivePartial<ComponentHydrateResponseData>) => void;
  updateSettings: (settings: RecursivePartial<EmbedSettings>) => void;
  setStripe: (stripe: Promise<Stripe | null> | null) => void;
  setLayout: (layout: EmbedLayout) => void;
}

export const EmbedContext = createContext<EmbedContextProps>({
  api: null,
  data: {
    activePlans: [],
  },
  nodes: [],
  settings: { ...defaultSettings },
  stripe: null,
  layout: "portal",
  error: undefined,
  isPending: false,
  hydrate: () => {},
  setData: () => {},
  updateSettings: () => {},
  setStripe: () => {},
  setLayout: () => {},
});

export interface EmbedProviderProps {
  id?: string;
  accessToken?: string;
  apiConfig?: ConfigurationParameters;
  children?: React.ReactNode;
}

export const EmbedProvider = ({
  id,
  accessToken,
  apiConfig,
  children,
}: EmbedProviderProps) => {
  const styleRef = useRef<HTMLLinkElement | null>(null);

  const [state, setState] = useState<{
    api: CheckoutApi | null;
    data: ComponentHydrateResponseData;
    nodes: SerializedNodeWithChildren[];
    settings: EmbedSettings;
    stripe: Promise<Stripe | null> | null;
    layout: EmbedLayout;
    isPending: boolean;
    error: Error | undefined;
    hydrate: () => void;
    setData: (data: RecursivePartial<ComponentHydrateResponseData>) => void;
    updateSettings: (settings: RecursivePartial<EmbedSettings>) => void;
    setStripe: (stripe: Promise<Stripe | null> | null) => void;
    setLayout: (layout: EmbedLayout) => void;
  }>(() => {
    return {
      api: null,
      data: {
        activePlans: [],
      },
      nodes: [],
      settings: { ...defaultSettings },
      stripe: null,
      layout: "portal",
      isPending: false,
      error: undefined,
      hydrate: () => {},
      setData: () => {},
      updateSettings: () => {},
      setStripe: () => {},
      setLayout: () => {},
    };
  });

  const isLightBackground = useMemo(() => {
    return hexToHSL(state.settings.theme.card.background).l > 50;
  }, [state.settings.theme.card.background]);

  const hydrate = useCallback(async () => {
    setState((prev) => ({ ...prev, isPending: true, error: undefined }));

    try {
      const nodes: SerializedNodeWithChildren[] = [];
      const settings: EmbedSettings = { ...defaultSettings };

      if (!id || !state.api) {
        throw new Error("Invalid component id or api instance.");
      }

      const response = await state.api.hydrateComponent({ componentId: id });
      const { data } = response;

      if (data.component?.ast) {
        const compressed = data.component.ast;
        const json = inflate(Uint8Array.from(Object.values(compressed)), {
          to: "string",
        });
        const ast = getEditorState(json);
        if (ast) {
          merge(settings, ast.ROOT.props.settings);
          nodes.push(...parseEditorState(ast));
        }
      }

      let stripe: Promise<Stripe | null> | null = null;
      if (data.stripeEmbed?.publishableKey) {
        stripe = loadStripe(data.stripeEmbed.publishableKey);
      }

      setState((prev) => ({
        ...prev,
        data,
        nodes,
        settings,
        stripe,
        isPending: false,
      }));
    } catch (error) {
      setState((prev) => ({
        ...prev,
        isPending: false,
        error:
          error instanceof Error
            ? error
            : new Error("An unknown error occurred."),
      }));
    }
  }, [id, state.api]);

  const setData = useCallback(
    (data: RecursivePartial<ComponentHydrateResponseData>) => {
      setState((prev) => {
        const updatedData = merge({}, prev.data, { ...data });
        return {
          ...prev,
          data: updatedData,
        };
      });
    },
    [setState],
  );

  const updateSettings = useCallback(
    (settings: RecursivePartial<EmbedSettings>) => {
      setState((prev) => {
        const updatedSettings = merge({}, prev.settings, { ...settings });
        return {
          ...prev,
          settings: updatedSettings,
        };
      });
    },
    [setState],
  );

  const setStripe = useCallback(
    (stripe: Promise<Stripe | null> | null) => {
      setState((prev) => ({
        ...prev,
        stripe,
      }));
    },
    [setState],
  );

  const setLayout = useCallback(
    (layout: EmbedLayout) => {
      setState((prev) => ({
        ...prev,
        layout,
      }));
    },
    [setState],
  );

  useEffect(() => {
    const element = document.getElementById("schematic-fonts");
    if (element) {
      return void (styleRef.current = element as HTMLLinkElement);
    }

    const style = document.createElement("link");
    style.id = "schematic-fonts";
    style.rel = "stylesheet";
    document.head.appendChild(style);
    styleRef.current = style;
  }, []);

  useEffect(() => {
    if (!accessToken) {
      return;
    }

    const config = new Configuration({ ...apiConfig, apiKey: accessToken });
    const api = new CheckoutApi(config);
    setState((prev) => ({ ...prev, api }));
  }, [accessToken, apiConfig]);

  useEffect(() => {
    hydrate();
  }, [hydrate]);

  useEffect(() => {
    const fontSet = new Set<string>([]);
    Object.values(state.settings.theme.typography).forEach(({ fontFamily }) => {
      fontSet.add(fontFamily);
    });

    if (fontSet.size > 0) {
      const src = `https://fonts.googleapis.com/css2?${[...fontSet]
        .map((fontFamily) => `family=${fontFamily}&display=swap`)
        .join("&")}`;
      if (styleRef.current) {
        styleRef.current.href = src;
      }
    }
  }, [state.settings.theme.typography]);

  const renderChildren = () => {
    if (state.stripe) {
      return (
        <Elements
          stripe={state.stripe}
          options={{
            appearance: {
              theme: "stripe",
              variables: {
                // Base
                fontFamily: '"Public Sans", system-ui, sans-serif',
                spacingUnit: "0.25rem",
                borderRadius: "0.5rem",
                colorText: "#30313D",
                colorBackground: "#FFFFFF",
                colorPrimary: "#0570DE",
                colorDanger: "#DF1B41",

                // Layout
                gridRowSpacing: "1.5rem",
                gridColumnSpacing: "1.5rem",
              },
              rules: {
                ".Label": {
                  fontSize: "1rem",
                  fontWeight: "400",
                  marginBottom: "0.75rem",
                  color: isLightBackground ? "#020202" : "#FFFFFF",
                },
              },
            },
            ...(state.data.stripeEmbed?.setupIntentClientSecret
              ? {
                  clientSecret: state.data.stripeEmbed?.setupIntentClientSecret,
                }
              : { mode: "payment", currency: "usd", amount: 999999 }),
          }}
        >
          {children}
        </Elements>
      );
    }

    return children;
  };

  return (
    <EmbedContext.Provider
      value={{
        api: state.api,
        data: state.data,
        nodes: state.nodes,
        settings: state.settings,
        stripe: state.stripe,
        layout: state.layout,
        error: state.error,
        isPending: state.isPending,
        hydrate,
        setData,
        updateSettings,
        setStripe,
        setLayout,
      }}
    >
      <ThemeProvider theme={state.settings.theme}>
        <GlobalStyle />
        {renderChildren()}
      </ThemeProvider>
    </EmbedContext.Provider>
  );
};
