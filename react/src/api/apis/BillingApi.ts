/* tslint:disable */
/* eslint-disable */
/**
 * Schematic API
 * Schematic API
 *
 * The version of the OpenAPI document: 0.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from "../runtime";
import type {
  ChangeSubscriptionRequestBody,
  ChangeSubscriptionWebResponse,
} from "../models/index";
import {
  ChangeSubscriptionRequestBodyToJSON,
  ChangeSubscriptionWebResponseFromJSON,
} from "../models/index";

export interface ChangeSubscriptionWebRequest {
  changeSubscriptionRequestBody: ChangeSubscriptionRequestBody;
}

/**
 *
 */
export class BillingApi extends runtime.BaseAPI {
  /**
   * Change subscription web
   */
  async changeSubscriptionWebRaw(
    requestParameters: ChangeSubscriptionWebRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<ChangeSubscriptionWebResponse>> {
    if (requestParameters["changeSubscriptionRequestBody"] == null) {
      throw new runtime.RequiredError(
        "changeSubscriptionRequestBody",
        'Required parameter "changeSubscriptionRequestBody" was null or undefined when calling changeSubscriptionWeb().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["X-Schematic-Api-Key"] = await this.configuration.apiKey(
        "X-Schematic-Api-Key",
      ); // ApiKeyAuth authentication
    }

    const response = await this.request(
      {
        path: `/checkout`,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: ChangeSubscriptionRequestBodyToJSON(
          requestParameters["changeSubscriptionRequestBody"],
        ),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      ChangeSubscriptionWebResponseFromJSON(jsonValue),
    );
  }

  /**
   * Change subscription web
   */
  async changeSubscriptionWeb(
    requestParameters: ChangeSubscriptionWebRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<ChangeSubscriptionWebResponse> {
    const response = await this.changeSubscriptionWebRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }
}
